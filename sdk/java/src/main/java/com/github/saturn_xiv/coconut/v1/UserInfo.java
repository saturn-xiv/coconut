/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.saturn_xiv.coconut.v1;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-01-17")
public class UserInfo implements org.apache.thrift.TBase<UserInfo, UserInfo._Fields>, java.io.Serializable, Cloneable, Comparable<UserInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("real_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CURRENT_SIGN_IN_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("current_sign_in_ip", org.apache.thrift.protocol.TType.STRING, (short)85);
  private static final org.apache.thrift.protocol.TField CURRENT_SIGN_IN_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("current_sign_in_at", org.apache.thrift.protocol.TType.I64, (short)86);
  private static final org.apache.thrift.protocol.TField LAST_SIGN_IN_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("last_sign_in_ip", org.apache.thrift.protocol.TType.STRING, (short)87);
  private static final org.apache.thrift.protocol.TField LAST_SIGN_IN_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("last_sign_in_at", org.apache.thrift.protocol.TType.I64, (short)88);
  private static final org.apache.thrift.protocol.TField SIGN_IN_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("sign_in_total", org.apache.thrift.protocol.TType.I64, (short)89);
  private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)98);
  private static final org.apache.thrift.protocol.TField TIMEZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("timezone", org.apache.thrift.protocol.TType.STRING, (short)99);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserInfoTupleSchemeFactory();

  public long id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String real_name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String nickname; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String email; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String current_sign_in_ip; // required
  public long current_sign_in_at; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String last_sign_in_ip; // required
  public long last_sign_in_at; // required
  public long sign_in_total; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String locale; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String timezone; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    REAL_NAME((short)2, "real_name"),
    NICKNAME((short)3, "nickname"),
    EMAIL((short)4, "email"),
    UID((short)5, "uid"),
    CURRENT_SIGN_IN_IP((short)85, "current_sign_in_ip"),
    CURRENT_SIGN_IN_AT((short)86, "current_sign_in_at"),
    LAST_SIGN_IN_IP((short)87, "last_sign_in_ip"),
    LAST_SIGN_IN_AT((short)88, "last_sign_in_at"),
    SIGN_IN_TOTAL((short)89, "sign_in_total"),
    LOCALE((short)98, "locale"),
    TIMEZONE((short)99, "timezone");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // REAL_NAME
          return REAL_NAME;
        case 3: // NICKNAME
          return NICKNAME;
        case 4: // EMAIL
          return EMAIL;
        case 5: // UID
          return UID;
        case 85: // CURRENT_SIGN_IN_IP
          return CURRENT_SIGN_IN_IP;
        case 86: // CURRENT_SIGN_IN_AT
          return CURRENT_SIGN_IN_AT;
        case 87: // LAST_SIGN_IN_IP
          return LAST_SIGN_IN_IP;
        case 88: // LAST_SIGN_IN_AT
          return LAST_SIGN_IN_AT;
        case 89: // SIGN_IN_TOTAL
          return SIGN_IN_TOTAL;
        case 98: // LOCALE
          return LOCALE;
        case 99: // TIMEZONE
          return TIMEZONE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CURRENT_SIGN_IN_AT_ISSET_ID = 1;
  private static final int __LAST_SIGN_IN_AT_ISSET_ID = 2;
  private static final int __SIGN_IN_TOTAL_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("real_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT_SIGN_IN_IP, new org.apache.thrift.meta_data.FieldMetaData("current_sign_in_ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT_SIGN_IN_AT, new org.apache.thrift.meta_data.FieldMetaData("current_sign_in_at", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_SIGN_IN_IP, new org.apache.thrift.meta_data.FieldMetaData("last_sign_in_ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_SIGN_IN_AT, new org.apache.thrift.meta_data.FieldMetaData("last_sign_in_at", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SIGN_IN_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("sign_in_total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMEZONE, new org.apache.thrift.meta_data.FieldMetaData("timezone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserInfo.class, metaDataMap);
  }

  public UserInfo() {
  }

  public UserInfo(
    long id,
    java.lang.String real_name,
    java.lang.String nickname,
    java.lang.String email,
    java.lang.String uid,
    java.lang.String current_sign_in_ip,
    long current_sign_in_at,
    java.lang.String last_sign_in_ip,
    long last_sign_in_at,
    long sign_in_total,
    java.lang.String locale,
    java.lang.String timezone)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.real_name = real_name;
    this.nickname = nickname;
    this.email = email;
    this.uid = uid;
    this.current_sign_in_ip = current_sign_in_ip;
    this.current_sign_in_at = current_sign_in_at;
    setCurrent_sign_in_atIsSet(true);
    this.last_sign_in_ip = last_sign_in_ip;
    this.last_sign_in_at = last_sign_in_at;
    setLast_sign_in_atIsSet(true);
    this.sign_in_total = sign_in_total;
    setSign_in_totalIsSet(true);
    this.locale = locale;
    this.timezone = timezone;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserInfo(UserInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetReal_name()) {
      this.real_name = other.real_name;
    }
    if (other.isSetNickname()) {
      this.nickname = other.nickname;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetCurrent_sign_in_ip()) {
      this.current_sign_in_ip = other.current_sign_in_ip;
    }
    this.current_sign_in_at = other.current_sign_in_at;
    if (other.isSetLast_sign_in_ip()) {
      this.last_sign_in_ip = other.last_sign_in_ip;
    }
    this.last_sign_in_at = other.last_sign_in_at;
    this.sign_in_total = other.sign_in_total;
    if (other.isSetLocale()) {
      this.locale = other.locale;
    }
    if (other.isSetTimezone()) {
      this.timezone = other.timezone;
    }
  }

  @Override
  public UserInfo deepCopy() {
    return new UserInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.real_name = null;
    this.nickname = null;
    this.email = null;
    this.uid = null;
    this.current_sign_in_ip = null;
    setCurrent_sign_in_atIsSet(false);
    this.current_sign_in_at = 0;
    this.last_sign_in_ip = null;
    setLast_sign_in_atIsSet(false);
    this.last_sign_in_at = 0;
    setSign_in_totalIsSet(false);
    this.sign_in_total = 0;
    this.locale = null;
    this.timezone = null;
  }

  public long getId() {
    return this.id;
  }

  public UserInfo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getReal_name() {
    return this.real_name;
  }

  public UserInfo setReal_name(@org.apache.thrift.annotation.Nullable java.lang.String real_name) {
    this.real_name = real_name;
    return this;
  }

  public void unsetReal_name() {
    this.real_name = null;
  }

  /** Returns true if field real_name is set (has been assigned a value) and false otherwise */
  public boolean isSetReal_name() {
    return this.real_name != null;
  }

  public void setReal_nameIsSet(boolean value) {
    if (!value) {
      this.real_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNickname() {
    return this.nickname;
  }

  public UserInfo setNickname(@org.apache.thrift.annotation.Nullable java.lang.String nickname) {
    this.nickname = nickname;
    return this;
  }

  public void unsetNickname() {
    this.nickname = null;
  }

  /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
  public boolean isSetNickname() {
    return this.nickname != null;
  }

  public void setNicknameIsSet(boolean value) {
    if (!value) {
      this.nickname = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEmail() {
    return this.email;
  }

  public UserInfo setEmail(@org.apache.thrift.annotation.Nullable java.lang.String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUid() {
    return this.uid;
  }

  public UserInfo setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCurrent_sign_in_ip() {
    return this.current_sign_in_ip;
  }

  public UserInfo setCurrent_sign_in_ip(@org.apache.thrift.annotation.Nullable java.lang.String current_sign_in_ip) {
    this.current_sign_in_ip = current_sign_in_ip;
    return this;
  }

  public void unsetCurrent_sign_in_ip() {
    this.current_sign_in_ip = null;
  }

  /** Returns true if field current_sign_in_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent_sign_in_ip() {
    return this.current_sign_in_ip != null;
  }

  public void setCurrent_sign_in_ipIsSet(boolean value) {
    if (!value) {
      this.current_sign_in_ip = null;
    }
  }

  public long getCurrent_sign_in_at() {
    return this.current_sign_in_at;
  }

  public UserInfo setCurrent_sign_in_at(long current_sign_in_at) {
    this.current_sign_in_at = current_sign_in_at;
    setCurrent_sign_in_atIsSet(true);
    return this;
  }

  public void unsetCurrent_sign_in_at() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURRENT_SIGN_IN_AT_ISSET_ID);
  }

  /** Returns true if field current_sign_in_at is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent_sign_in_at() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURRENT_SIGN_IN_AT_ISSET_ID);
  }

  public void setCurrent_sign_in_atIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURRENT_SIGN_IN_AT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLast_sign_in_ip() {
    return this.last_sign_in_ip;
  }

  public UserInfo setLast_sign_in_ip(@org.apache.thrift.annotation.Nullable java.lang.String last_sign_in_ip) {
    this.last_sign_in_ip = last_sign_in_ip;
    return this;
  }

  public void unsetLast_sign_in_ip() {
    this.last_sign_in_ip = null;
  }

  /** Returns true if field last_sign_in_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_sign_in_ip() {
    return this.last_sign_in_ip != null;
  }

  public void setLast_sign_in_ipIsSet(boolean value) {
    if (!value) {
      this.last_sign_in_ip = null;
    }
  }

  public long getLast_sign_in_at() {
    return this.last_sign_in_at;
  }

  public UserInfo setLast_sign_in_at(long last_sign_in_at) {
    this.last_sign_in_at = last_sign_in_at;
    setLast_sign_in_atIsSet(true);
    return this;
  }

  public void unsetLast_sign_in_at() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LAST_SIGN_IN_AT_ISSET_ID);
  }

  /** Returns true if field last_sign_in_at is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_sign_in_at() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LAST_SIGN_IN_AT_ISSET_ID);
  }

  public void setLast_sign_in_atIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LAST_SIGN_IN_AT_ISSET_ID, value);
  }

  public long getSign_in_total() {
    return this.sign_in_total;
  }

  public UserInfo setSign_in_total(long sign_in_total) {
    this.sign_in_total = sign_in_total;
    setSign_in_totalIsSet(true);
    return this;
  }

  public void unsetSign_in_total() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIGN_IN_TOTAL_ISSET_ID);
  }

  /** Returns true if field sign_in_total is set (has been assigned a value) and false otherwise */
  public boolean isSetSign_in_total() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIGN_IN_TOTAL_ISSET_ID);
  }

  public void setSign_in_totalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIGN_IN_TOTAL_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLocale() {
    return this.locale;
  }

  public UserInfo setLocale(@org.apache.thrift.annotation.Nullable java.lang.String locale) {
    this.locale = locale;
    return this;
  }

  public void unsetLocale() {
    this.locale = null;
  }

  /** Returns true if field locale is set (has been assigned a value) and false otherwise */
  public boolean isSetLocale() {
    return this.locale != null;
  }

  public void setLocaleIsSet(boolean value) {
    if (!value) {
      this.locale = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTimezone() {
    return this.timezone;
  }

  public UserInfo setTimezone(@org.apache.thrift.annotation.Nullable java.lang.String timezone) {
    this.timezone = timezone;
    return this;
  }

  public void unsetTimezone() {
    this.timezone = null;
  }

  /** Returns true if field timezone is set (has been assigned a value) and false otherwise */
  public boolean isSetTimezone() {
    return this.timezone != null;
  }

  public void setTimezoneIsSet(boolean value) {
    if (!value) {
      this.timezone = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetReal_name();
      } else {
        setReal_name((java.lang.String)value);
      }
      break;

    case NICKNAME:
      if (value == null) {
        unsetNickname();
      } else {
        setNickname((java.lang.String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((java.lang.String)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((java.lang.String)value);
      }
      break;

    case CURRENT_SIGN_IN_IP:
      if (value == null) {
        unsetCurrent_sign_in_ip();
      } else {
        setCurrent_sign_in_ip((java.lang.String)value);
      }
      break;

    case CURRENT_SIGN_IN_AT:
      if (value == null) {
        unsetCurrent_sign_in_at();
      } else {
        setCurrent_sign_in_at((java.lang.Long)value);
      }
      break;

    case LAST_SIGN_IN_IP:
      if (value == null) {
        unsetLast_sign_in_ip();
      } else {
        setLast_sign_in_ip((java.lang.String)value);
      }
      break;

    case LAST_SIGN_IN_AT:
      if (value == null) {
        unsetLast_sign_in_at();
      } else {
        setLast_sign_in_at((java.lang.Long)value);
      }
      break;

    case SIGN_IN_TOTAL:
      if (value == null) {
        unsetSign_in_total();
      } else {
        setSign_in_total((java.lang.Long)value);
      }
      break;

    case LOCALE:
      if (value == null) {
        unsetLocale();
      } else {
        setLocale((java.lang.String)value);
      }
      break;

    case TIMEZONE:
      if (value == null) {
        unsetTimezone();
      } else {
        setTimezone((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case REAL_NAME:
      return getReal_name();

    case NICKNAME:
      return getNickname();

    case EMAIL:
      return getEmail();

    case UID:
      return getUid();

    case CURRENT_SIGN_IN_IP:
      return getCurrent_sign_in_ip();

    case CURRENT_SIGN_IN_AT:
      return getCurrent_sign_in_at();

    case LAST_SIGN_IN_IP:
      return getLast_sign_in_ip();

    case LAST_SIGN_IN_AT:
      return getLast_sign_in_at();

    case SIGN_IN_TOTAL:
      return getSign_in_total();

    case LOCALE:
      return getLocale();

    case TIMEZONE:
      return getTimezone();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case REAL_NAME:
      return isSetReal_name();
    case NICKNAME:
      return isSetNickname();
    case EMAIL:
      return isSetEmail();
    case UID:
      return isSetUid();
    case CURRENT_SIGN_IN_IP:
      return isSetCurrent_sign_in_ip();
    case CURRENT_SIGN_IN_AT:
      return isSetCurrent_sign_in_at();
    case LAST_SIGN_IN_IP:
      return isSetLast_sign_in_ip();
    case LAST_SIGN_IN_AT:
      return isSetLast_sign_in_at();
    case SIGN_IN_TOTAL:
      return isSetSign_in_total();
    case LOCALE:
      return isSetLocale();
    case TIMEZONE:
      return isSetTimezone();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof UserInfo)
      return this.equals((UserInfo)that);
    return false;
  }

  public boolean equals(UserInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_real_name = true && this.isSetReal_name();
    boolean that_present_real_name = true && that.isSetReal_name();
    if (this_present_real_name || that_present_real_name) {
      if (!(this_present_real_name && that_present_real_name))
        return false;
      if (!this.real_name.equals(that.real_name))
        return false;
    }

    boolean this_present_nickname = true && this.isSetNickname();
    boolean that_present_nickname = true && that.isSetNickname();
    if (this_present_nickname || that_present_nickname) {
      if (!(this_present_nickname && that_present_nickname))
        return false;
      if (!this.nickname.equals(that.nickname))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_current_sign_in_ip = true && this.isSetCurrent_sign_in_ip();
    boolean that_present_current_sign_in_ip = true && that.isSetCurrent_sign_in_ip();
    if (this_present_current_sign_in_ip || that_present_current_sign_in_ip) {
      if (!(this_present_current_sign_in_ip && that_present_current_sign_in_ip))
        return false;
      if (!this.current_sign_in_ip.equals(that.current_sign_in_ip))
        return false;
    }

    boolean this_present_current_sign_in_at = true;
    boolean that_present_current_sign_in_at = true;
    if (this_present_current_sign_in_at || that_present_current_sign_in_at) {
      if (!(this_present_current_sign_in_at && that_present_current_sign_in_at))
        return false;
      if (this.current_sign_in_at != that.current_sign_in_at)
        return false;
    }

    boolean this_present_last_sign_in_ip = true && this.isSetLast_sign_in_ip();
    boolean that_present_last_sign_in_ip = true && that.isSetLast_sign_in_ip();
    if (this_present_last_sign_in_ip || that_present_last_sign_in_ip) {
      if (!(this_present_last_sign_in_ip && that_present_last_sign_in_ip))
        return false;
      if (!this.last_sign_in_ip.equals(that.last_sign_in_ip))
        return false;
    }

    boolean this_present_last_sign_in_at = true;
    boolean that_present_last_sign_in_at = true;
    if (this_present_last_sign_in_at || that_present_last_sign_in_at) {
      if (!(this_present_last_sign_in_at && that_present_last_sign_in_at))
        return false;
      if (this.last_sign_in_at != that.last_sign_in_at)
        return false;
    }

    boolean this_present_sign_in_total = true;
    boolean that_present_sign_in_total = true;
    if (this_present_sign_in_total || that_present_sign_in_total) {
      if (!(this_present_sign_in_total && that_present_sign_in_total))
        return false;
      if (this.sign_in_total != that.sign_in_total)
        return false;
    }

    boolean this_present_locale = true && this.isSetLocale();
    boolean that_present_locale = true && that.isSetLocale();
    if (this_present_locale || that_present_locale) {
      if (!(this_present_locale && that_present_locale))
        return false;
      if (!this.locale.equals(that.locale))
        return false;
    }

    boolean this_present_timezone = true && this.isSetTimezone();
    boolean that_present_timezone = true && that.isSetTimezone();
    if (this_present_timezone || that_present_timezone) {
      if (!(this_present_timezone && that_present_timezone))
        return false;
      if (!this.timezone.equals(that.timezone))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetReal_name()) ? 131071 : 524287);
    if (isSetReal_name())
      hashCode = hashCode * 8191 + real_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetNickname()) ? 131071 : 524287);
    if (isSetNickname())
      hashCode = hashCode * 8191 + nickname.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
    if (isSetEmail())
      hashCode = hashCode * 8191 + email.hashCode();

    hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
    if (isSetUid())
      hashCode = hashCode * 8191 + uid.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrent_sign_in_ip()) ? 131071 : 524287);
    if (isSetCurrent_sign_in_ip())
      hashCode = hashCode * 8191 + current_sign_in_ip.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(current_sign_in_at);

    hashCode = hashCode * 8191 + ((isSetLast_sign_in_ip()) ? 131071 : 524287);
    if (isSetLast_sign_in_ip())
      hashCode = hashCode * 8191 + last_sign_in_ip.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(last_sign_in_at);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sign_in_total);

    hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
    if (isSetLocale())
      hashCode = hashCode * 8191 + locale.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimezone()) ? 131071 : 524287);
    if (isSetTimezone())
      hashCode = hashCode * 8191 + timezone.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UserInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReal_name(), other.isSetReal_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReal_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.real_name, other.real_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNickname(), other.isSetNickname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEmail(), other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUid(), other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCurrent_sign_in_ip(), other.isSetCurrent_sign_in_ip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent_sign_in_ip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_sign_in_ip, other.current_sign_in_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCurrent_sign_in_at(), other.isSetCurrent_sign_in_at());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent_sign_in_at()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_sign_in_at, other.current_sign_in_at);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_sign_in_ip(), other.isSetLast_sign_in_ip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_sign_in_ip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_sign_in_ip, other.last_sign_in_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_sign_in_at(), other.isSetLast_sign_in_at());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_sign_in_at()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_sign_in_at, other.last_sign_in_at);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSign_in_total(), other.isSetSign_in_total());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSign_in_total()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sign_in_total, other.sign_in_total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLocale(), other.isSetLocale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimezone(), other.isSetTimezone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimezone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timezone, other.timezone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UserInfo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("real_name:");
    if (this.real_name == null) {
      sb.append("null");
    } else {
      sb.append(this.real_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickname:");
    if (this.nickname == null) {
      sb.append("null");
    } else {
      sb.append(this.nickname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("current_sign_in_ip:");
    if (this.current_sign_in_ip == null) {
      sb.append("null");
    } else {
      sb.append(this.current_sign_in_ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("current_sign_in_at:");
    sb.append(this.current_sign_in_at);
    first = false;
    if (!first) sb.append(", ");
    sb.append("last_sign_in_ip:");
    if (this.last_sign_in_ip == null) {
      sb.append("null");
    } else {
      sb.append(this.last_sign_in_ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("last_sign_in_at:");
    sb.append(this.last_sign_in_at);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sign_in_total:");
    sb.append(this.sign_in_total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("locale:");
    if (this.locale == null) {
      sb.append("null");
    } else {
      sb.append(this.locale);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timezone:");
    if (this.timezone == null) {
      sb.append("null");
    } else {
      sb.append(this.timezone);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public UserInfoStandardScheme getScheme() {
      return new UserInfoStandardScheme();
    }
  }

  private static class UserInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, UserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.real_name = iprot.readString();
              struct.setReal_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NICKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickname = iprot.readString();
              struct.setNicknameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 85: // CURRENT_SIGN_IN_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.current_sign_in_ip = iprot.readString();
              struct.setCurrent_sign_in_ipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 86: // CURRENT_SIGN_IN_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.current_sign_in_at = iprot.readI64();
              struct.setCurrent_sign_in_atIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 87: // LAST_SIGN_IN_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_sign_in_ip = iprot.readString();
              struct.setLast_sign_in_ipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 88: // LAST_SIGN_IN_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.last_sign_in_at = iprot.readI64();
              struct.setLast_sign_in_atIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 89: // SIGN_IN_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sign_in_total = iprot.readI64();
              struct.setSign_in_totalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 98: // LOCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locale = iprot.readString();
              struct.setLocaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 99: // TIMEZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timezone = iprot.readString();
              struct.setTimezoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, UserInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.real_name != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.real_name);
        oprot.writeFieldEnd();
      }
      if (struct.nickname != null) {
        oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
        oprot.writeString(struct.nickname);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.current_sign_in_ip != null) {
        oprot.writeFieldBegin(CURRENT_SIGN_IN_IP_FIELD_DESC);
        oprot.writeString(struct.current_sign_in_ip);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURRENT_SIGN_IN_AT_FIELD_DESC);
      oprot.writeI64(struct.current_sign_in_at);
      oprot.writeFieldEnd();
      if (struct.last_sign_in_ip != null) {
        oprot.writeFieldBegin(LAST_SIGN_IN_IP_FIELD_DESC);
        oprot.writeString(struct.last_sign_in_ip);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_SIGN_IN_AT_FIELD_DESC);
      oprot.writeI64(struct.last_sign_in_at);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIGN_IN_TOTAL_FIELD_DESC);
      oprot.writeI64(struct.sign_in_total);
      oprot.writeFieldEnd();
      if (struct.locale != null) {
        oprot.writeFieldBegin(LOCALE_FIELD_DESC);
        oprot.writeString(struct.locale);
        oprot.writeFieldEnd();
      }
      if (struct.timezone != null) {
        oprot.writeFieldBegin(TIMEZONE_FIELD_DESC);
        oprot.writeString(struct.timezone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public UserInfoTupleScheme getScheme() {
      return new UserInfoTupleScheme();
    }
  }

  private static class UserInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetReal_name()) {
        optionals.set(1);
      }
      if (struct.isSetNickname()) {
        optionals.set(2);
      }
      if (struct.isSetEmail()) {
        optionals.set(3);
      }
      if (struct.isSetUid()) {
        optionals.set(4);
      }
      if (struct.isSetCurrent_sign_in_ip()) {
        optionals.set(5);
      }
      if (struct.isSetCurrent_sign_in_at()) {
        optionals.set(6);
      }
      if (struct.isSetLast_sign_in_ip()) {
        optionals.set(7);
      }
      if (struct.isSetLast_sign_in_at()) {
        optionals.set(8);
      }
      if (struct.isSetSign_in_total()) {
        optionals.set(9);
      }
      if (struct.isSetLocale()) {
        optionals.set(10);
      }
      if (struct.isSetTimezone()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetReal_name()) {
        oprot.writeString(struct.real_name);
      }
      if (struct.isSetNickname()) {
        oprot.writeString(struct.nickname);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetUid()) {
        oprot.writeString(struct.uid);
      }
      if (struct.isSetCurrent_sign_in_ip()) {
        oprot.writeString(struct.current_sign_in_ip);
      }
      if (struct.isSetCurrent_sign_in_at()) {
        oprot.writeI64(struct.current_sign_in_at);
      }
      if (struct.isSetLast_sign_in_ip()) {
        oprot.writeString(struct.last_sign_in_ip);
      }
      if (struct.isSetLast_sign_in_at()) {
        oprot.writeI64(struct.last_sign_in_at);
      }
      if (struct.isSetSign_in_total()) {
        oprot.writeI64(struct.sign_in_total);
      }
      if (struct.isSetLocale()) {
        oprot.writeString(struct.locale);
      }
      if (struct.isSetTimezone()) {
        oprot.writeString(struct.timezone);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.real_name = iprot.readString();
        struct.setReal_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nickname = iprot.readString();
        struct.setNicknameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(4)) {
        struct.uid = iprot.readString();
        struct.setUidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.current_sign_in_ip = iprot.readString();
        struct.setCurrent_sign_in_ipIsSet(true);
      }
      if (incoming.get(6)) {
        struct.current_sign_in_at = iprot.readI64();
        struct.setCurrent_sign_in_atIsSet(true);
      }
      if (incoming.get(7)) {
        struct.last_sign_in_ip = iprot.readString();
        struct.setLast_sign_in_ipIsSet(true);
      }
      if (incoming.get(8)) {
        struct.last_sign_in_at = iprot.readI64();
        struct.setLast_sign_in_atIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sign_in_total = iprot.readI64();
        struct.setSign_in_totalIsSet(true);
      }
      if (incoming.get(10)) {
        struct.locale = iprot.readString();
        struct.setLocaleIsSet(true);
      }
      if (incoming.get(11)) {
        struct.timezone = iprot.readString();
        struct.setTimezoneIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

