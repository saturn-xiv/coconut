/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.saturn_xiv.coconut.v1;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class UserSignInResponse implements org.apache.thrift.TBase<UserSignInResponse, UserSignInResponse._Fields>, java.io.Serializable, Cloneable, Comparable<UserSignInResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserSignInResponse");

  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("real_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ROLES_FIELD_DESC = new org.apache.thrift.protocol.TField("roles", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField PERMISSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("permissions", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)97);
  private static final org.apache.thrift.protocol.TField TIMEZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("timezone", org.apache.thrift.protocol.TType.STRING, (short)98);
  private static final org.apache.thrift.protocol.TField BY_FIELD_DESC = new org.apache.thrift.protocol.TField("by", org.apache.thrift.protocol.TType.I32, (short)99);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserSignInResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserSignInResponseTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String real_name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String token; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> roles; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<Permission> permissions; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String locale; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String timezone; // required
  /**
   * 
   * @see UserSignInBy
   */
  public @org.apache.thrift.annotation.Nullable UserSignInBy by; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REAL_NAME((short)1, "real_name"),
    TOKEN((short)2, "token"),
    ROLES((short)11, "roles"),
    PERMISSIONS((short)12, "permissions"),
    LOCALE((short)97, "locale"),
    TIMEZONE((short)98, "timezone"),
    /**
     * 
     * @see UserSignInBy
     */
    BY((short)99, "by");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REAL_NAME
          return REAL_NAME;
        case 2: // TOKEN
          return TOKEN;
        case 11: // ROLES
          return ROLES;
        case 12: // PERMISSIONS
          return PERMISSIONS;
        case 97: // LOCALE
          return LOCALE;
        case 98: // TIMEZONE
          return TIMEZONE;
        case 99: // BY
          return BY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("real_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLES, new org.apache.thrift.meta_data.FieldMetaData("roles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PERMISSIONS, new org.apache.thrift.meta_data.FieldMetaData("permissions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Permission.class))));
    tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMEZONE, new org.apache.thrift.meta_data.FieldMetaData("timezone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BY, new org.apache.thrift.meta_data.FieldMetaData("by", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, UserSignInBy.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserSignInResponse.class, metaDataMap);
  }

  public UserSignInResponse() {
    this.roles = new java.util.ArrayList<java.lang.String>();

    this.permissions = new java.util.ArrayList<Permission>();

  }

  public UserSignInResponse(
    java.lang.String real_name,
    java.lang.String token,
    java.util.List<java.lang.String> roles,
    java.util.List<Permission> permissions,
    java.lang.String locale,
    java.lang.String timezone,
    UserSignInBy by)
  {
    this();
    this.real_name = real_name;
    this.token = token;
    this.roles = roles;
    this.permissions = permissions;
    this.locale = locale;
    this.timezone = timezone;
    this.by = by;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserSignInResponse(UserSignInResponse other) {
    if (other.isSetReal_name()) {
      this.real_name = other.real_name;
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetRoles()) {
      java.util.List<java.lang.String> __this__roles = new java.util.ArrayList<java.lang.String>(other.roles);
      this.roles = __this__roles;
    }
    if (other.isSetPermissions()) {
      java.util.List<Permission> __this__permissions = new java.util.ArrayList<Permission>(other.permissions.size());
      for (Permission other_element : other.permissions) {
        __this__permissions.add(new Permission(other_element));
      }
      this.permissions = __this__permissions;
    }
    if (other.isSetLocale()) {
      this.locale = other.locale;
    }
    if (other.isSetTimezone()) {
      this.timezone = other.timezone;
    }
    if (other.isSetBy()) {
      this.by = other.by;
    }
  }

  @Override
  public UserSignInResponse deepCopy() {
    return new UserSignInResponse(this);
  }

  @Override
  public void clear() {
    this.real_name = null;
    this.token = null;
    this.roles = new java.util.ArrayList<java.lang.String>();

    this.permissions = new java.util.ArrayList<Permission>();

    this.locale = null;
    this.timezone = null;
    this.by = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getReal_name() {
    return this.real_name;
  }

  public UserSignInResponse setReal_name(@org.apache.thrift.annotation.Nullable java.lang.String real_name) {
    this.real_name = real_name;
    return this;
  }

  public void unsetReal_name() {
    this.real_name = null;
  }

  /** Returns true if field real_name is set (has been assigned a value) and false otherwise */
  public boolean isSetReal_name() {
    return this.real_name != null;
  }

  public void setReal_nameIsSet(boolean value) {
    if (!value) {
      this.real_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getToken() {
    return this.token;
  }

  public UserSignInResponse setToken(@org.apache.thrift.annotation.Nullable java.lang.String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public int getRolesSize() {
    return (this.roles == null) ? 0 : this.roles.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getRolesIterator() {
    return (this.roles == null) ? null : this.roles.iterator();
  }

  public void addToRoles(java.lang.String elem) {
    if (this.roles == null) {
      this.roles = new java.util.ArrayList<java.lang.String>();
    }
    this.roles.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getRoles() {
    return this.roles;
  }

  public UserSignInResponse setRoles(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> roles) {
    this.roles = roles;
    return this;
  }

  public void unsetRoles() {
    this.roles = null;
  }

  /** Returns true if field roles is set (has been assigned a value) and false otherwise */
  public boolean isSetRoles() {
    return this.roles != null;
  }

  public void setRolesIsSet(boolean value) {
    if (!value) {
      this.roles = null;
    }
  }

  public int getPermissionsSize() {
    return (this.permissions == null) ? 0 : this.permissions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Permission> getPermissionsIterator() {
    return (this.permissions == null) ? null : this.permissions.iterator();
  }

  public void addToPermissions(Permission elem) {
    if (this.permissions == null) {
      this.permissions = new java.util.ArrayList<Permission>();
    }
    this.permissions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Permission> getPermissions() {
    return this.permissions;
  }

  public UserSignInResponse setPermissions(@org.apache.thrift.annotation.Nullable java.util.List<Permission> permissions) {
    this.permissions = permissions;
    return this;
  }

  public void unsetPermissions() {
    this.permissions = null;
  }

  /** Returns true if field permissions is set (has been assigned a value) and false otherwise */
  public boolean isSetPermissions() {
    return this.permissions != null;
  }

  public void setPermissionsIsSet(boolean value) {
    if (!value) {
      this.permissions = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLocale() {
    return this.locale;
  }

  public UserSignInResponse setLocale(@org.apache.thrift.annotation.Nullable java.lang.String locale) {
    this.locale = locale;
    return this;
  }

  public void unsetLocale() {
    this.locale = null;
  }

  /** Returns true if field locale is set (has been assigned a value) and false otherwise */
  public boolean isSetLocale() {
    return this.locale != null;
  }

  public void setLocaleIsSet(boolean value) {
    if (!value) {
      this.locale = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTimezone() {
    return this.timezone;
  }

  public UserSignInResponse setTimezone(@org.apache.thrift.annotation.Nullable java.lang.String timezone) {
    this.timezone = timezone;
    return this;
  }

  public void unsetTimezone() {
    this.timezone = null;
  }

  /** Returns true if field timezone is set (has been assigned a value) and false otherwise */
  public boolean isSetTimezone() {
    return this.timezone != null;
  }

  public void setTimezoneIsSet(boolean value) {
    if (!value) {
      this.timezone = null;
    }
  }

  /**
   * 
   * @see UserSignInBy
   */
  @org.apache.thrift.annotation.Nullable
  public UserSignInBy getBy() {
    return this.by;
  }

  /**
   * 
   * @see UserSignInBy
   */
  public UserSignInResponse setBy(@org.apache.thrift.annotation.Nullable UserSignInBy by) {
    this.by = by;
    return this;
  }

  public void unsetBy() {
    this.by = null;
  }

  /** Returns true if field by is set (has been assigned a value) and false otherwise */
  public boolean isSetBy() {
    return this.by != null;
  }

  public void setByIsSet(boolean value) {
    if (!value) {
      this.by = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case REAL_NAME:
      if (value == null) {
        unsetReal_name();
      } else {
        setReal_name((java.lang.String)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((java.lang.String)value);
      }
      break;

    case ROLES:
      if (value == null) {
        unsetRoles();
      } else {
        setRoles((java.util.List<java.lang.String>)value);
      }
      break;

    case PERMISSIONS:
      if (value == null) {
        unsetPermissions();
      } else {
        setPermissions((java.util.List<Permission>)value);
      }
      break;

    case LOCALE:
      if (value == null) {
        unsetLocale();
      } else {
        setLocale((java.lang.String)value);
      }
      break;

    case TIMEZONE:
      if (value == null) {
        unsetTimezone();
      } else {
        setTimezone((java.lang.String)value);
      }
      break;

    case BY:
      if (value == null) {
        unsetBy();
      } else {
        setBy((UserSignInBy)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case REAL_NAME:
      return getReal_name();

    case TOKEN:
      return getToken();

    case ROLES:
      return getRoles();

    case PERMISSIONS:
      return getPermissions();

    case LOCALE:
      return getLocale();

    case TIMEZONE:
      return getTimezone();

    case BY:
      return getBy();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case REAL_NAME:
      return isSetReal_name();
    case TOKEN:
      return isSetToken();
    case ROLES:
      return isSetRoles();
    case PERMISSIONS:
      return isSetPermissions();
    case LOCALE:
      return isSetLocale();
    case TIMEZONE:
      return isSetTimezone();
    case BY:
      return isSetBy();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof UserSignInResponse)
      return this.equals((UserSignInResponse)that);
    return false;
  }

  public boolean equals(UserSignInResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_real_name = true && this.isSetReal_name();
    boolean that_present_real_name = true && that.isSetReal_name();
    if (this_present_real_name || that_present_real_name) {
      if (!(this_present_real_name && that_present_real_name))
        return false;
      if (!this.real_name.equals(that.real_name))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_roles = true && this.isSetRoles();
    boolean that_present_roles = true && that.isSetRoles();
    if (this_present_roles || that_present_roles) {
      if (!(this_present_roles && that_present_roles))
        return false;
      if (!this.roles.equals(that.roles))
        return false;
    }

    boolean this_present_permissions = true && this.isSetPermissions();
    boolean that_present_permissions = true && that.isSetPermissions();
    if (this_present_permissions || that_present_permissions) {
      if (!(this_present_permissions && that_present_permissions))
        return false;
      if (!this.permissions.equals(that.permissions))
        return false;
    }

    boolean this_present_locale = true && this.isSetLocale();
    boolean that_present_locale = true && that.isSetLocale();
    if (this_present_locale || that_present_locale) {
      if (!(this_present_locale && that_present_locale))
        return false;
      if (!this.locale.equals(that.locale))
        return false;
    }

    boolean this_present_timezone = true && this.isSetTimezone();
    boolean that_present_timezone = true && that.isSetTimezone();
    if (this_present_timezone || that_present_timezone) {
      if (!(this_present_timezone && that_present_timezone))
        return false;
      if (!this.timezone.equals(that.timezone))
        return false;
    }

    boolean this_present_by = true && this.isSetBy();
    boolean that_present_by = true && that.isSetBy();
    if (this_present_by || that_present_by) {
      if (!(this_present_by && that_present_by))
        return false;
      if (!this.by.equals(that.by))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetReal_name()) ? 131071 : 524287);
    if (isSetReal_name())
      hashCode = hashCode * 8191 + real_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
    if (isSetToken())
      hashCode = hashCode * 8191 + token.hashCode();

    hashCode = hashCode * 8191 + ((isSetRoles()) ? 131071 : 524287);
    if (isSetRoles())
      hashCode = hashCode * 8191 + roles.hashCode();

    hashCode = hashCode * 8191 + ((isSetPermissions()) ? 131071 : 524287);
    if (isSetPermissions())
      hashCode = hashCode * 8191 + permissions.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
    if (isSetLocale())
      hashCode = hashCode * 8191 + locale.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimezone()) ? 131071 : 524287);
    if (isSetTimezone())
      hashCode = hashCode * 8191 + timezone.hashCode();

    hashCode = hashCode * 8191 + ((isSetBy()) ? 131071 : 524287);
    if (isSetBy())
      hashCode = hashCode * 8191 + by.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(UserSignInResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetReal_name(), other.isSetReal_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReal_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.real_name, other.real_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetToken(), other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRoles(), other.isSetRoles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roles, other.roles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPermissions(), other.isSetPermissions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermissions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permissions, other.permissions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLocale(), other.isSetLocale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimezone(), other.isSetTimezone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimezone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timezone, other.timezone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBy(), other.isSetBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.by, other.by);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UserSignInResponse(");
    boolean first = true;

    sb.append("real_name:");
    if (this.real_name == null) {
      sb.append("null");
    } else {
      sb.append(this.real_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("roles:");
    if (this.roles == null) {
      sb.append("null");
    } else {
      sb.append(this.roles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("permissions:");
    if (this.permissions == null) {
      sb.append("null");
    } else {
      sb.append(this.permissions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locale:");
    if (this.locale == null) {
      sb.append("null");
    } else {
      sb.append(this.locale);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timezone:");
    if (this.timezone == null) {
      sb.append("null");
    } else {
      sb.append(this.timezone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("by:");
    if (this.by == null) {
      sb.append("null");
    } else {
      sb.append(this.by);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserSignInResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public UserSignInResponseStandardScheme getScheme() {
      return new UserSignInResponseStandardScheme();
    }
  }

  private static class UserSignInResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserSignInResponse> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, UserSignInResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.real_name = iprot.readString();
              struct.setReal_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ROLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.roles = new java.util.ArrayList<java.lang.String>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.roles.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setRolesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PERMISSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.permissions = new java.util.ArrayList<Permission>(_list3.size);
                @org.apache.thrift.annotation.Nullable Permission _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new Permission();
                  _elem4.read(iprot);
                  struct.permissions.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setPermissionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 97: // LOCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locale = iprot.readString();
              struct.setLocaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 98: // TIMEZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timezone = iprot.readString();
              struct.setTimezoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 99: // BY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.by = com.github.saturn_xiv.coconut.v1.UserSignInBy.findByValue(iprot.readI32());
              struct.setByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, UserSignInResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.real_name != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.real_name);
        oprot.writeFieldEnd();
      }
      if (struct.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(struct.token);
        oprot.writeFieldEnd();
      }
      if (struct.roles != null) {
        oprot.writeFieldBegin(ROLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.roles.size()));
          for (java.lang.String _iter6 : struct.roles)
          {
            oprot.writeString(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.permissions != null) {
        oprot.writeFieldBegin(PERMISSIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.permissions.size()));
          for (Permission _iter7 : struct.permissions)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.locale != null) {
        oprot.writeFieldBegin(LOCALE_FIELD_DESC);
        oprot.writeString(struct.locale);
        oprot.writeFieldEnd();
      }
      if (struct.timezone != null) {
        oprot.writeFieldBegin(TIMEZONE_FIELD_DESC);
        oprot.writeString(struct.timezone);
        oprot.writeFieldEnd();
      }
      if (struct.by != null) {
        oprot.writeFieldBegin(BY_FIELD_DESC);
        oprot.writeI32(struct.by.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserSignInResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public UserSignInResponseTupleScheme getScheme() {
      return new UserSignInResponseTupleScheme();
    }
  }

  private static class UserSignInResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserSignInResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserSignInResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReal_name()) {
        optionals.set(0);
      }
      if (struct.isSetToken()) {
        optionals.set(1);
      }
      if (struct.isSetRoles()) {
        optionals.set(2);
      }
      if (struct.isSetPermissions()) {
        optionals.set(3);
      }
      if (struct.isSetLocale()) {
        optionals.set(4);
      }
      if (struct.isSetTimezone()) {
        optionals.set(5);
      }
      if (struct.isSetBy()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetReal_name()) {
        oprot.writeString(struct.real_name);
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetRoles()) {
        {
          oprot.writeI32(struct.roles.size());
          for (java.lang.String _iter8 : struct.roles)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetPermissions()) {
        {
          oprot.writeI32(struct.permissions.size());
          for (Permission _iter9 : struct.permissions)
          {
            _iter9.write(oprot);
          }
        }
      }
      if (struct.isSetLocale()) {
        oprot.writeString(struct.locale);
      }
      if (struct.isSetTimezone()) {
        oprot.writeString(struct.timezone);
      }
      if (struct.isSetBy()) {
        oprot.writeI32(struct.by.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserSignInResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.real_name = iprot.readString();
        struct.setReal_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list10 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.roles = new java.util.ArrayList<java.lang.String>(_list10.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readString();
            struct.roles.add(_elem11);
          }
        }
        struct.setRolesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.permissions = new java.util.ArrayList<Permission>(_list13.size);
          @org.apache.thrift.annotation.Nullable Permission _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new Permission();
            _elem14.read(iprot);
            struct.permissions.add(_elem14);
          }
        }
        struct.setPermissionsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.locale = iprot.readString();
        struct.setLocaleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.timezone = iprot.readString();
        struct.setTimezoneIsSet(true);
      }
      if (incoming.get(6)) {
        struct.by = com.github.saturn_xiv.coconut.v1.UserSignInBy.findByValue(iprot.readI32());
        struct.setByIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

