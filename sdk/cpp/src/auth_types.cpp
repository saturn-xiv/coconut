/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "auth_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace coconut { namespace v1 {

int _kUserSignInByValues[] = {
  UserSignInBy::EMAIL,
  UserSignInBy::NICKNAME,
  UserSignInBy::PHONE,
  UserSignInBy::GOOGLE_OAUTH2,
  UserSignInBy::WECHAT_OAUTH2,
  UserSignInBy::WECHAT_MINI_PROGRAM,
  UserSignInBy::FACEBOOK_OAUTH2
};
const char* _kUserSignInByNames[] = {
  "EMAIL",
  "NICKNAME",
  "PHONE",
  "GOOGLE_OAUTH2",
  "WECHAT_OAUTH2",
  "WECHAT_MINI_PROGRAM",
  "FACEBOOK_OAUTH2"
};
const std::map<int, const char*> _UserSignInBy_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kUserSignInByValues, _kUserSignInByNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const UserSignInBy::type& val) {
  std::map<int, const char*>::const_iterator it = _UserSignInBy_VALUES_TO_NAMES.find(val);
  if (it != _UserSignInBy_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const UserSignInBy::type& val) {
  std::map<int, const char*>::const_iterator it = _UserSignInBy_VALUES_TO_NAMES.find(val);
  if (it != _UserSignInBy_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kLogLevelValues[] = {
  LogLevel::DEBUG,
  LogLevel::INFO,
  LogLevel::WARNING,
  LogLevel::ERROR
};
const char* _kLogLevelNames[] = {
  "DEBUG",
  "INFO",
  "WARNING",
  "ERROR"
};
const std::map<int, const char*> _LogLevel_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kLogLevelValues, _kLogLevelNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const LogLevel::type& val) {
  std::map<int, const char*>::const_iterator it = _LogLevel_VALUES_TO_NAMES.find(val);
  if (it != _LogLevel_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const LogLevel::type& val) {
  std::map<int, const char*>::const_iterator it = _LogLevel_VALUES_TO_NAMES.find(val);
  if (it != _LogLevel_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


Resource::~Resource() noexcept {
}


void Resource::__set_type(const std::string& val) {
  this->type = val;
}

void Resource::__set_id(const int64_t val) {
  this->id = val;
}
std::ostream& operator<<(std::ostream& out, const Resource& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Resource::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Resource::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Resource");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Resource &a, Resource &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

Resource::Resource(const Resource& other0) {
  type = other0.type;
  id = other0.id;
  __isset = other0.__isset;
}
Resource& Resource::operator=(const Resource& other1) {
  type = other1.type;
  id = other1.id;
  __isset = other1.__isset;
  return *this;
}
void Resource::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Resource(";
  out << "type=" << to_string(type);
  out << ", " << "id=" << to_string(id);
  out << ")";
}


Permission::~Permission() noexcept {
}


void Permission::__set_resource(const Resource& val) {
  this->resource = val;
}

void Permission::__set_operation(const std::string& val) {
  this->operation = val;
}
std::ostream& operator<<(std::ostream& out, const Permission& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Permission::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->resource.read(iprot);
          this->__isset.resource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->operation);
          this->__isset.operation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Permission::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Permission");

  xfer += oprot->writeFieldBegin("resource", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->resource.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("operation", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->operation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Permission &a, Permission &b) {
  using ::std::swap;
  swap(a.resource, b.resource);
  swap(a.operation, b.operation);
  swap(a.__isset, b.__isset);
}

Permission::Permission(const Permission& other2) {
  resource = other2.resource;
  operation = other2.operation;
  __isset = other2.__isset;
}
Permission& Permission::operator=(const Permission& other3) {
  resource = other3.resource;
  operation = other3.operation;
  __isset = other3.__isset;
  return *this;
}
void Permission::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Permission(";
  out << "resource=" << to_string(resource);
  out << ", " << "operation=" << to_string(operation);
  out << ")";
}


UserInfo::~UserInfo() noexcept {
}


void UserInfo::__set_id(const int64_t val) {
  this->id = val;
}

void UserInfo::__set_nickname(const std::string& val) {
  this->nickname = val;
}

void UserInfo::__set_email(const std::string& val) {
  this->email = val;
}

void UserInfo::__set_uid(const std::string& val) {
  this->uid = val;
}

void UserInfo::__set_real_name(const std::string& val) {
  this->real_name = val;
}

void UserInfo::__set_avatar(const std::string& val) {
  this->avatar = val;
}

void UserInfo::__set_current_sign_in_ip(const std::string& val) {
  this->current_sign_in_ip = val;
}

void UserInfo::__set_current_sign_in_at(const int64_t val) {
  this->current_sign_in_at = val;
}

void UserInfo::__set_last_sign_in_ip(const std::string& val) {
  this->last_sign_in_ip = val;
}

void UserInfo::__set_last_sign_in_at(const int64_t val) {
  this->last_sign_in_at = val;
}

void UserInfo::__set_sign_in_total(const int64_t val) {
  this->sign_in_total = val;
}

void UserInfo::__set_locale(const std::string& val) {
  this->locale = val;
}

void UserInfo::__set_timezone(const std::string& val) {
  this->timezone = val;
}
std::ostream& operator<<(std::ostream& out, const UserInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UserInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nickname);
          this->__isset.nickname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->real_name);
          this->__isset.real_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->avatar);
          this->__isset.avatar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 85:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->current_sign_in_ip);
          this->__isset.current_sign_in_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 86:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->current_sign_in_at);
          this->__isset.current_sign_in_at = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 87:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->last_sign_in_ip);
          this->__isset.last_sign_in_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 88:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_sign_in_at);
          this->__isset.last_sign_in_at = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 89:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sign_in_total);
          this->__isset.sign_in_total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 98:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locale);
          this->__isset.locale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 99:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timezone);
          this->__isset.timezone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserInfo");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nickname", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->nickname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("real_name", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->real_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avatar", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->avatar);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current_sign_in_ip", ::apache::thrift::protocol::T_STRING, 85);
  xfer += oprot->writeString(this->current_sign_in_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current_sign_in_at", ::apache::thrift::protocol::T_I64, 86);
  xfer += oprot->writeI64(this->current_sign_in_at);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_sign_in_ip", ::apache::thrift::protocol::T_STRING, 87);
  xfer += oprot->writeString(this->last_sign_in_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_sign_in_at", ::apache::thrift::protocol::T_I64, 88);
  xfer += oprot->writeI64(this->last_sign_in_at);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sign_in_total", ::apache::thrift::protocol::T_I64, 89);
  xfer += oprot->writeI64(this->sign_in_total);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locale", ::apache::thrift::protocol::T_STRING, 98);
  xfer += oprot->writeString(this->locale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timezone", ::apache::thrift::protocol::T_STRING, 99);
  xfer += oprot->writeString(this->timezone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserInfo &a, UserInfo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.nickname, b.nickname);
  swap(a.email, b.email);
  swap(a.uid, b.uid);
  swap(a.real_name, b.real_name);
  swap(a.avatar, b.avatar);
  swap(a.current_sign_in_ip, b.current_sign_in_ip);
  swap(a.current_sign_in_at, b.current_sign_in_at);
  swap(a.last_sign_in_ip, b.last_sign_in_ip);
  swap(a.last_sign_in_at, b.last_sign_in_at);
  swap(a.sign_in_total, b.sign_in_total);
  swap(a.locale, b.locale);
  swap(a.timezone, b.timezone);
  swap(a.__isset, b.__isset);
}

UserInfo::UserInfo(const UserInfo& other4) {
  id = other4.id;
  nickname = other4.nickname;
  email = other4.email;
  uid = other4.uid;
  real_name = other4.real_name;
  avatar = other4.avatar;
  current_sign_in_ip = other4.current_sign_in_ip;
  current_sign_in_at = other4.current_sign_in_at;
  last_sign_in_ip = other4.last_sign_in_ip;
  last_sign_in_at = other4.last_sign_in_at;
  sign_in_total = other4.sign_in_total;
  locale = other4.locale;
  timezone = other4.timezone;
  __isset = other4.__isset;
}
UserInfo& UserInfo::operator=(const UserInfo& other5) {
  id = other5.id;
  nickname = other5.nickname;
  email = other5.email;
  uid = other5.uid;
  real_name = other5.real_name;
  avatar = other5.avatar;
  current_sign_in_ip = other5.current_sign_in_ip;
  current_sign_in_at = other5.current_sign_in_at;
  last_sign_in_ip = other5.last_sign_in_ip;
  last_sign_in_at = other5.last_sign_in_at;
  sign_in_total = other5.sign_in_total;
  locale = other5.locale;
  timezone = other5.timezone;
  __isset = other5.__isset;
  return *this;
}
void UserInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserInfo(";
  out << "id=" << to_string(id);
  out << ", " << "nickname=" << to_string(nickname);
  out << ", " << "email=" << to_string(email);
  out << ", " << "uid=" << to_string(uid);
  out << ", " << "real_name=" << to_string(real_name);
  out << ", " << "avatar=" << to_string(avatar);
  out << ", " << "current_sign_in_ip=" << to_string(current_sign_in_ip);
  out << ", " << "current_sign_in_at=" << to_string(current_sign_in_at);
  out << ", " << "last_sign_in_ip=" << to_string(last_sign_in_ip);
  out << ", " << "last_sign_in_at=" << to_string(last_sign_in_at);
  out << ", " << "sign_in_total=" << to_string(sign_in_total);
  out << ", " << "locale=" << to_string(locale);
  out << ", " << "timezone=" << to_string(timezone);
  out << ")";
}


UserSignInRequest::~UserSignInRequest() noexcept {
}


void UserSignInRequest::__set_code(const std::string& val) {
  this->code = val;
}

void UserSignInRequest::__set_password(const std::string& val) {
  this->password = val;
}

void UserSignInRequest::__set_ttl(const int64_t val) {
  this->ttl = val;
}
std::ostream& operator<<(std::ostream& out, const UserSignInRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UserSignInRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ttl);
          this->__isset.ttl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserSignInRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserSignInRequest");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ttl", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->ttl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserSignInRequest &a, UserSignInRequest &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.password, b.password);
  swap(a.ttl, b.ttl);
  swap(a.__isset, b.__isset);
}

UserSignInRequest::UserSignInRequest(const UserSignInRequest& other6) {
  code = other6.code;
  password = other6.password;
  ttl = other6.ttl;
  __isset = other6.__isset;
}
UserSignInRequest& UserSignInRequest::operator=(const UserSignInRequest& other7) {
  code = other7.code;
  password = other7.password;
  ttl = other7.ttl;
  __isset = other7.__isset;
  return *this;
}
void UserSignInRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserSignInRequest(";
  out << "code=" << to_string(code);
  out << ", " << "password=" << to_string(password);
  out << ", " << "ttl=" << to_string(ttl);
  out << ")";
}


UserSignInResponse::~UserSignInResponse() noexcept {
}


void UserSignInResponse::__set_real_name(const std::string& val) {
  this->real_name = val;
}

void UserSignInResponse::__set_token(const std::string& val) {
  this->token = val;
}

void UserSignInResponse::__set_roles(const std::vector<std::string> & val) {
  this->roles = val;
}

void UserSignInResponse::__set_permissions(const std::vector<Permission> & val) {
  this->permissions = val;
}

void UserSignInResponse::__set_locale(const std::string& val) {
  this->locale = val;
}

void UserSignInResponse::__set_timezone(const std::string& val) {
  this->timezone = val;
}

void UserSignInResponse::__set_by(const UserSignInBy::type val) {
  this->by = val;
}
std::ostream& operator<<(std::ostream& out, const UserSignInResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UserSignInResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->real_name);
          this->__isset.real_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->roles.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->roles.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += iprot->readString(this->roles[_i12]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.roles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->permissions.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            xfer += iprot->readListBegin(_etype16, _size13);
            this->permissions.resize(_size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              xfer += this->permissions[_i17].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.permissions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 97:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locale);
          this->__isset.locale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 98:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timezone);
          this->__isset.timezone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 99:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast18;
          xfer += iprot->readI32(ecast18);
          this->by = static_cast<UserSignInBy::type>(ecast18);
          this->__isset.by = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserSignInResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserSignInResponse");

  xfer += oprot->writeFieldBegin("real_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->real_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roles", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->roles.size()));
    std::vector<std::string> ::const_iterator _iter19;
    for (_iter19 = this->roles.begin(); _iter19 != this->roles.end(); ++_iter19)
    {
      xfer += oprot->writeString((*_iter19));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("permissions", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->permissions.size()));
    std::vector<Permission> ::const_iterator _iter20;
    for (_iter20 = this->permissions.begin(); _iter20 != this->permissions.end(); ++_iter20)
    {
      xfer += (*_iter20).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locale", ::apache::thrift::protocol::T_STRING, 97);
  xfer += oprot->writeString(this->locale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timezone", ::apache::thrift::protocol::T_STRING, 98);
  xfer += oprot->writeString(this->timezone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("by", ::apache::thrift::protocol::T_I32, 99);
  xfer += oprot->writeI32(static_cast<int32_t>(this->by));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserSignInResponse &a, UserSignInResponse &b) {
  using ::std::swap;
  swap(a.real_name, b.real_name);
  swap(a.token, b.token);
  swap(a.roles, b.roles);
  swap(a.permissions, b.permissions);
  swap(a.locale, b.locale);
  swap(a.timezone, b.timezone);
  swap(a.by, b.by);
  swap(a.__isset, b.__isset);
}

UserSignInResponse::UserSignInResponse(const UserSignInResponse& other21) {
  real_name = other21.real_name;
  token = other21.token;
  roles = other21.roles;
  permissions = other21.permissions;
  locale = other21.locale;
  timezone = other21.timezone;
  by = other21.by;
  __isset = other21.__isset;
}
UserSignInResponse& UserSignInResponse::operator=(const UserSignInResponse& other22) {
  real_name = other22.real_name;
  token = other22.token;
  roles = other22.roles;
  permissions = other22.permissions;
  locale = other22.locale;
  timezone = other22.timezone;
  by = other22.by;
  __isset = other22.__isset;
  return *this;
}
void UserSignInResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserSignInResponse(";
  out << "real_name=" << to_string(real_name);
  out << ", " << "token=" << to_string(token);
  out << ", " << "roles=" << to_string(roles);
  out << ", " << "permissions=" << to_string(permissions);
  out << ", " << "locale=" << to_string(locale);
  out << ", " << "timezone=" << to_string(timezone);
  out << ", " << "by=" << to_string(by);
  out << ")";
}


UserSignUpRequest::~UserSignUpRequest() noexcept {
}


void UserSignUpRequest::__set_real_name(const std::string& val) {
  this->real_name = val;
}

void UserSignUpRequest::__set_nickname(const std::string& val) {
  this->nickname = val;
}

void UserSignUpRequest::__set_email(const std::string& val) {
  this->email = val;
}

void UserSignUpRequest::__set_password(const std::string& val) {
  this->password = val;
}

void UserSignUpRequest::__set_locale(const std::string& val) {
  this->locale = val;
}

void UserSignUpRequest::__set_timezone(const std::string& val) {
  this->timezone = val;
}
std::ostream& operator<<(std::ostream& out, const UserSignUpRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UserSignUpRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->real_name);
          this->__isset.real_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nickname);
          this->__isset.nickname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locale);
          this->__isset.locale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timezone);
          this->__isset.timezone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserSignUpRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserSignUpRequest");

  xfer += oprot->writeFieldBegin("real_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->real_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nickname", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->nickname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locale", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->locale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timezone", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->timezone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserSignUpRequest &a, UserSignUpRequest &b) {
  using ::std::swap;
  swap(a.real_name, b.real_name);
  swap(a.nickname, b.nickname);
  swap(a.email, b.email);
  swap(a.password, b.password);
  swap(a.locale, b.locale);
  swap(a.timezone, b.timezone);
  swap(a.__isset, b.__isset);
}

UserSignUpRequest::UserSignUpRequest(const UserSignUpRequest& other23) {
  real_name = other23.real_name;
  nickname = other23.nickname;
  email = other23.email;
  password = other23.password;
  locale = other23.locale;
  timezone = other23.timezone;
  __isset = other23.__isset;
}
UserSignUpRequest& UserSignUpRequest::operator=(const UserSignUpRequest& other24) {
  real_name = other24.real_name;
  nickname = other24.nickname;
  email = other24.email;
  password = other24.password;
  locale = other24.locale;
  timezone = other24.timezone;
  __isset = other24.__isset;
  return *this;
}
void UserSignUpRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserSignUpRequest(";
  out << "real_name=" << to_string(real_name);
  out << ", " << "nickname=" << to_string(nickname);
  out << ", " << "email=" << to_string(email);
  out << ", " << "password=" << to_string(password);
  out << ", " << "locale=" << to_string(locale);
  out << ", " << "timezone=" << to_string(timezone);
  out << ")";
}


LogItem::~LogItem() noexcept {
}


void LogItem::__set_id(const int64_t val) {
  this->id = val;
}

void LogItem::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void LogItem::__set_plugin(const std::string& val) {
  this->plugin = val;
}

void LogItem::__set_message(const std::string& val) {
  this->message = val;
}

void LogItem::__set_ip(const std::string& val) {
  this->ip = val;
}

void LogItem::__set_level(const LogLevel::type val) {
  this->level = val;
}

void LogItem::__set_created_at(const std::string& val) {
  this->created_at = val;
}
std::ostream& operator<<(std::ostream& out, const LogItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LogItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plugin);
          this->__isset.plugin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast25;
          xfer += iprot->readI32(ecast25);
          this->level = static_cast<LogLevel::type>(ecast25);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->created_at);
          this->__isset.created_at = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LogItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LogItem");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plugin", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->plugin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(static_cast<int32_t>(this->level));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created_at", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->created_at);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LogItem &a, LogItem &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.user_id, b.user_id);
  swap(a.plugin, b.plugin);
  swap(a.message, b.message);
  swap(a.ip, b.ip);
  swap(a.level, b.level);
  swap(a.created_at, b.created_at);
  swap(a.__isset, b.__isset);
}

LogItem::LogItem(const LogItem& other26) {
  id = other26.id;
  user_id = other26.user_id;
  plugin = other26.plugin;
  message = other26.message;
  ip = other26.ip;
  level = other26.level;
  created_at = other26.created_at;
  __isset = other26.__isset;
}
LogItem& LogItem::operator=(const LogItem& other27) {
  id = other27.id;
  user_id = other27.user_id;
  plugin = other27.plugin;
  message = other27.message;
  ip = other27.ip;
  level = other27.level;
  created_at = other27.created_at;
  __isset = other27.__isset;
  return *this;
}
void LogItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LogItem(";
  out << "id=" << to_string(id);
  out << ", " << "user_id=" << to_string(user_id);
  out << ", " << "plugin=" << to_string(plugin);
  out << ", " << "message=" << to_string(message);
  out << ", " << "ip=" << to_string(ip);
  out << ", " << "level=" << to_string(level);
  out << ", " << "created_at=" << to_string(created_at);
  out << ")";
}

}} // namespace
