/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef User_H
#define User_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "auth_types.h"

namespace coconut { namespace v1 {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class UserIf {
 public:
  virtual ~UserIf() {}
  virtual void sign_in(UserSignInResponse& _return, const UserSignInRequest& request) = 0;
  virtual void sign_up(const UserSignUpRequest& request) = 0;
  virtual void confirm_by_email(const std::string& email) = 0;
  virtual void configm_by_token(const std::string& token) = 0;
  virtual void unlock_by_email(const std::string& email) = 0;
  virtual void unlock_by_token(const std::string& token) = 0;
  virtual void forgot_password(const std::string& email) = 0;
  virtual void reset_password(const std::string& token, const std::string& password) = 0;
  virtual void set_real_name(const int64_t id, const std::string& real_name) = 0;
  virtual void set_avatar(const int64_t id, const std::string& avatar) = 0;
  virtual void set_locale(const int64_t id, const std::string& locale) = 0;
  virtual void set_timezone(const int64_t id, const std::string& timezone) = 0;
  virtual void set_password(const int64_t id, const std::string& password) = 0;
  virtual void confirm(const int64_t id) = 0;
  virtual void lock(const int64_t id) = 0;
  virtual void unlock(const int64_t id) = 0;
  virtual void enable(const int64_t id) = 0;
  virtual void disable(const int64_t id) = 0;
  virtual void all(std::vector<UserInfo> & _return) = 0;
  virtual void by_nickname(UserInfo& _return, const std::string& nickname) = 0;
  virtual void by_email(UserInfo& _return, const std::string& email) = 0;
  virtual void by_id(UserInfo& _return, const int64_t id) = 0;
  virtual void by_uid(UserInfo& _return, const std::string& uid) = 0;
};

class UserIfFactory {
 public:
  typedef UserIf Handler;

  virtual ~UserIfFactory() {}

  virtual UserIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UserIf* /* handler */) = 0;
  };

class UserIfSingletonFactory : virtual public UserIfFactory {
 public:
  UserIfSingletonFactory(const ::std::shared_ptr<UserIf>& iface) : iface_(iface) {}
  virtual ~UserIfSingletonFactory() {}

  virtual UserIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(UserIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<UserIf> iface_;
};

class UserNull : virtual public UserIf {
 public:
  virtual ~UserNull() {}
  void sign_in(UserSignInResponse& /* _return */, const UserSignInRequest& /* request */) override {
    return;
  }
  void sign_up(const UserSignUpRequest& /* request */) override {
    return;
  }
  void confirm_by_email(const std::string& /* email */) override {
    return;
  }
  void configm_by_token(const std::string& /* token */) override {
    return;
  }
  void unlock_by_email(const std::string& /* email */) override {
    return;
  }
  void unlock_by_token(const std::string& /* token */) override {
    return;
  }
  void forgot_password(const std::string& /* email */) override {
    return;
  }
  void reset_password(const std::string& /* token */, const std::string& /* password */) override {
    return;
  }
  void set_real_name(const int64_t /* id */, const std::string& /* real_name */) override {
    return;
  }
  void set_avatar(const int64_t /* id */, const std::string& /* avatar */) override {
    return;
  }
  void set_locale(const int64_t /* id */, const std::string& /* locale */) override {
    return;
  }
  void set_timezone(const int64_t /* id */, const std::string& /* timezone */) override {
    return;
  }
  void set_password(const int64_t /* id */, const std::string& /* password */) override {
    return;
  }
  void confirm(const int64_t /* id */) override {
    return;
  }
  void lock(const int64_t /* id */) override {
    return;
  }
  void unlock(const int64_t /* id */) override {
    return;
  }
  void enable(const int64_t /* id */) override {
    return;
  }
  void disable(const int64_t /* id */) override {
    return;
  }
  void all(std::vector<UserInfo> & /* _return */) override {
    return;
  }
  void by_nickname(UserInfo& /* _return */, const std::string& /* nickname */) override {
    return;
  }
  void by_email(UserInfo& /* _return */, const std::string& /* email */) override {
    return;
  }
  void by_id(UserInfo& /* _return */, const int64_t /* id */) override {
    return;
  }
  void by_uid(UserInfo& /* _return */, const std::string& /* uid */) override {
    return;
  }
};

typedef struct _User_sign_in_args__isset {
  _User_sign_in_args__isset() : request(false) {}
  bool request :1;
} _User_sign_in_args__isset;

class User_sign_in_args {
 public:

  User_sign_in_args(const User_sign_in_args&);
  User_sign_in_args& operator=(const User_sign_in_args&);
  User_sign_in_args() noexcept {
  }

  virtual ~User_sign_in_args() noexcept;
  UserSignInRequest request;

  _User_sign_in_args__isset __isset;

  void __set_request(const UserSignInRequest& val);

  bool operator == (const User_sign_in_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const User_sign_in_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_sign_in_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_sign_in_pargs {
 public:


  virtual ~User_sign_in_pargs() noexcept;
  const UserSignInRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_sign_in_result__isset {
  _User_sign_in_result__isset() : success(false) {}
  bool success :1;
} _User_sign_in_result__isset;

class User_sign_in_result {
 public:

  User_sign_in_result(const User_sign_in_result&);
  User_sign_in_result& operator=(const User_sign_in_result&);
  User_sign_in_result() noexcept {
  }

  virtual ~User_sign_in_result() noexcept;
  UserSignInResponse success;

  _User_sign_in_result__isset __isset;

  void __set_success(const UserSignInResponse& val);

  bool operator == (const User_sign_in_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_sign_in_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_sign_in_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_sign_in_presult__isset {
  _User_sign_in_presult__isset() : success(false) {}
  bool success :1;
} _User_sign_in_presult__isset;

class User_sign_in_presult {
 public:


  virtual ~User_sign_in_presult() noexcept;
  UserSignInResponse* success;

  _User_sign_in_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_sign_up_args__isset {
  _User_sign_up_args__isset() : request(false) {}
  bool request :1;
} _User_sign_up_args__isset;

class User_sign_up_args {
 public:

  User_sign_up_args(const User_sign_up_args&);
  User_sign_up_args& operator=(const User_sign_up_args&);
  User_sign_up_args() noexcept {
  }

  virtual ~User_sign_up_args() noexcept;
  UserSignUpRequest request;

  _User_sign_up_args__isset __isset;

  void __set_request(const UserSignUpRequest& val);

  bool operator == (const User_sign_up_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const User_sign_up_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_sign_up_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_sign_up_pargs {
 public:


  virtual ~User_sign_up_pargs() noexcept;
  const UserSignUpRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_sign_up_result {
 public:

  User_sign_up_result(const User_sign_up_result&) noexcept;
  User_sign_up_result& operator=(const User_sign_up_result&) noexcept;
  User_sign_up_result() noexcept {
  }

  virtual ~User_sign_up_result() noexcept;

  bool operator == (const User_sign_up_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const User_sign_up_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_sign_up_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_sign_up_presult {
 public:


  virtual ~User_sign_up_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_confirm_by_email_args__isset {
  _User_confirm_by_email_args__isset() : email(false) {}
  bool email :1;
} _User_confirm_by_email_args__isset;

class User_confirm_by_email_args {
 public:

  User_confirm_by_email_args(const User_confirm_by_email_args&);
  User_confirm_by_email_args& operator=(const User_confirm_by_email_args&);
  User_confirm_by_email_args() noexcept
                             : email() {
  }

  virtual ~User_confirm_by_email_args() noexcept;
  std::string email;

  _User_confirm_by_email_args__isset __isset;

  void __set_email(const std::string& val);

  bool operator == (const User_confirm_by_email_args & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    return true;
  }
  bool operator != (const User_confirm_by_email_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_confirm_by_email_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_confirm_by_email_pargs {
 public:


  virtual ~User_confirm_by_email_pargs() noexcept;
  const std::string* email;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_confirm_by_email_result {
 public:

  User_confirm_by_email_result(const User_confirm_by_email_result&) noexcept;
  User_confirm_by_email_result& operator=(const User_confirm_by_email_result&) noexcept;
  User_confirm_by_email_result() noexcept {
  }

  virtual ~User_confirm_by_email_result() noexcept;

  bool operator == (const User_confirm_by_email_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const User_confirm_by_email_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_confirm_by_email_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_confirm_by_email_presult {
 public:


  virtual ~User_confirm_by_email_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_configm_by_token_args__isset {
  _User_configm_by_token_args__isset() : token(false) {}
  bool token :1;
} _User_configm_by_token_args__isset;

class User_configm_by_token_args {
 public:

  User_configm_by_token_args(const User_configm_by_token_args&);
  User_configm_by_token_args& operator=(const User_configm_by_token_args&);
  User_configm_by_token_args() noexcept
                             : token() {
  }

  virtual ~User_configm_by_token_args() noexcept;
  std::string token;

  _User_configm_by_token_args__isset __isset;

  void __set_token(const std::string& val);

  bool operator == (const User_configm_by_token_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const User_configm_by_token_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_configm_by_token_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_configm_by_token_pargs {
 public:


  virtual ~User_configm_by_token_pargs() noexcept;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_configm_by_token_result {
 public:

  User_configm_by_token_result(const User_configm_by_token_result&) noexcept;
  User_configm_by_token_result& operator=(const User_configm_by_token_result&) noexcept;
  User_configm_by_token_result() noexcept {
  }

  virtual ~User_configm_by_token_result() noexcept;

  bool operator == (const User_configm_by_token_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const User_configm_by_token_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_configm_by_token_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_configm_by_token_presult {
 public:


  virtual ~User_configm_by_token_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_unlock_by_email_args__isset {
  _User_unlock_by_email_args__isset() : email(false) {}
  bool email :1;
} _User_unlock_by_email_args__isset;

class User_unlock_by_email_args {
 public:

  User_unlock_by_email_args(const User_unlock_by_email_args&);
  User_unlock_by_email_args& operator=(const User_unlock_by_email_args&);
  User_unlock_by_email_args() noexcept
                            : email() {
  }

  virtual ~User_unlock_by_email_args() noexcept;
  std::string email;

  _User_unlock_by_email_args__isset __isset;

  void __set_email(const std::string& val);

  bool operator == (const User_unlock_by_email_args & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    return true;
  }
  bool operator != (const User_unlock_by_email_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_unlock_by_email_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_unlock_by_email_pargs {
 public:


  virtual ~User_unlock_by_email_pargs() noexcept;
  const std::string* email;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_unlock_by_email_result {
 public:

  User_unlock_by_email_result(const User_unlock_by_email_result&) noexcept;
  User_unlock_by_email_result& operator=(const User_unlock_by_email_result&) noexcept;
  User_unlock_by_email_result() noexcept {
  }

  virtual ~User_unlock_by_email_result() noexcept;

  bool operator == (const User_unlock_by_email_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const User_unlock_by_email_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_unlock_by_email_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_unlock_by_email_presult {
 public:


  virtual ~User_unlock_by_email_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_unlock_by_token_args__isset {
  _User_unlock_by_token_args__isset() : token(false) {}
  bool token :1;
} _User_unlock_by_token_args__isset;

class User_unlock_by_token_args {
 public:

  User_unlock_by_token_args(const User_unlock_by_token_args&);
  User_unlock_by_token_args& operator=(const User_unlock_by_token_args&);
  User_unlock_by_token_args() noexcept
                            : token() {
  }

  virtual ~User_unlock_by_token_args() noexcept;
  std::string token;

  _User_unlock_by_token_args__isset __isset;

  void __set_token(const std::string& val);

  bool operator == (const User_unlock_by_token_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const User_unlock_by_token_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_unlock_by_token_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_unlock_by_token_pargs {
 public:


  virtual ~User_unlock_by_token_pargs() noexcept;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_unlock_by_token_result {
 public:

  User_unlock_by_token_result(const User_unlock_by_token_result&) noexcept;
  User_unlock_by_token_result& operator=(const User_unlock_by_token_result&) noexcept;
  User_unlock_by_token_result() noexcept {
  }

  virtual ~User_unlock_by_token_result() noexcept;

  bool operator == (const User_unlock_by_token_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const User_unlock_by_token_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_unlock_by_token_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_unlock_by_token_presult {
 public:


  virtual ~User_unlock_by_token_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_forgot_password_args__isset {
  _User_forgot_password_args__isset() : email(false) {}
  bool email :1;
} _User_forgot_password_args__isset;

class User_forgot_password_args {
 public:

  User_forgot_password_args(const User_forgot_password_args&);
  User_forgot_password_args& operator=(const User_forgot_password_args&);
  User_forgot_password_args() noexcept
                            : email() {
  }

  virtual ~User_forgot_password_args() noexcept;
  std::string email;

  _User_forgot_password_args__isset __isset;

  void __set_email(const std::string& val);

  bool operator == (const User_forgot_password_args & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    return true;
  }
  bool operator != (const User_forgot_password_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_forgot_password_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_forgot_password_pargs {
 public:


  virtual ~User_forgot_password_pargs() noexcept;
  const std::string* email;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_forgot_password_result {
 public:

  User_forgot_password_result(const User_forgot_password_result&) noexcept;
  User_forgot_password_result& operator=(const User_forgot_password_result&) noexcept;
  User_forgot_password_result() noexcept {
  }

  virtual ~User_forgot_password_result() noexcept;

  bool operator == (const User_forgot_password_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const User_forgot_password_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_forgot_password_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_forgot_password_presult {
 public:


  virtual ~User_forgot_password_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_reset_password_args__isset {
  _User_reset_password_args__isset() : token(false), password(false) {}
  bool token :1;
  bool password :1;
} _User_reset_password_args__isset;

class User_reset_password_args {
 public:

  User_reset_password_args(const User_reset_password_args&);
  User_reset_password_args& operator=(const User_reset_password_args&);
  User_reset_password_args() noexcept
                           : token(),
                             password() {
  }

  virtual ~User_reset_password_args() noexcept;
  std::string token;
  std::string password;

  _User_reset_password_args__isset __isset;

  void __set_token(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const User_reset_password_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const User_reset_password_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_reset_password_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_reset_password_pargs {
 public:


  virtual ~User_reset_password_pargs() noexcept;
  const std::string* token;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_reset_password_result {
 public:

  User_reset_password_result(const User_reset_password_result&) noexcept;
  User_reset_password_result& operator=(const User_reset_password_result&) noexcept;
  User_reset_password_result() noexcept {
  }

  virtual ~User_reset_password_result() noexcept;

  bool operator == (const User_reset_password_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const User_reset_password_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_reset_password_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_reset_password_presult {
 public:


  virtual ~User_reset_password_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_set_real_name_args__isset {
  _User_set_real_name_args__isset() : id(false), real_name(false) {}
  bool id :1;
  bool real_name :1;
} _User_set_real_name_args__isset;

class User_set_real_name_args {
 public:

  User_set_real_name_args(const User_set_real_name_args&);
  User_set_real_name_args& operator=(const User_set_real_name_args&);
  User_set_real_name_args() noexcept
                          : id(0),
                            real_name() {
  }

  virtual ~User_set_real_name_args() noexcept;
  int64_t id;
  std::string real_name;

  _User_set_real_name_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_real_name(const std::string& val);

  bool operator == (const User_set_real_name_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(real_name == rhs.real_name))
      return false;
    return true;
  }
  bool operator != (const User_set_real_name_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_set_real_name_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_set_real_name_pargs {
 public:


  virtual ~User_set_real_name_pargs() noexcept;
  const int64_t* id;
  const std::string* real_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_set_real_name_result {
 public:

  User_set_real_name_result(const User_set_real_name_result&) noexcept;
  User_set_real_name_result& operator=(const User_set_real_name_result&) noexcept;
  User_set_real_name_result() noexcept {
  }

  virtual ~User_set_real_name_result() noexcept;

  bool operator == (const User_set_real_name_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const User_set_real_name_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_set_real_name_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_set_real_name_presult {
 public:


  virtual ~User_set_real_name_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_set_avatar_args__isset {
  _User_set_avatar_args__isset() : id(false), avatar(false) {}
  bool id :1;
  bool avatar :1;
} _User_set_avatar_args__isset;

class User_set_avatar_args {
 public:

  User_set_avatar_args(const User_set_avatar_args&);
  User_set_avatar_args& operator=(const User_set_avatar_args&);
  User_set_avatar_args() noexcept
                       : id(0),
                         avatar() {
  }

  virtual ~User_set_avatar_args() noexcept;
  int64_t id;
  std::string avatar;

  _User_set_avatar_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_avatar(const std::string& val);

  bool operator == (const User_set_avatar_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(avatar == rhs.avatar))
      return false;
    return true;
  }
  bool operator != (const User_set_avatar_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_set_avatar_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_set_avatar_pargs {
 public:


  virtual ~User_set_avatar_pargs() noexcept;
  const int64_t* id;
  const std::string* avatar;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_set_avatar_result {
 public:

  User_set_avatar_result(const User_set_avatar_result&) noexcept;
  User_set_avatar_result& operator=(const User_set_avatar_result&) noexcept;
  User_set_avatar_result() noexcept {
  }

  virtual ~User_set_avatar_result() noexcept;

  bool operator == (const User_set_avatar_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const User_set_avatar_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_set_avatar_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_set_avatar_presult {
 public:


  virtual ~User_set_avatar_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_set_locale_args__isset {
  _User_set_locale_args__isset() : id(false), locale(false) {}
  bool id :1;
  bool locale :1;
} _User_set_locale_args__isset;

class User_set_locale_args {
 public:

  User_set_locale_args(const User_set_locale_args&);
  User_set_locale_args& operator=(const User_set_locale_args&);
  User_set_locale_args() noexcept
                       : id(0),
                         locale() {
  }

  virtual ~User_set_locale_args() noexcept;
  int64_t id;
  std::string locale;

  _User_set_locale_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_locale(const std::string& val);

  bool operator == (const User_set_locale_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(locale == rhs.locale))
      return false;
    return true;
  }
  bool operator != (const User_set_locale_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_set_locale_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_set_locale_pargs {
 public:


  virtual ~User_set_locale_pargs() noexcept;
  const int64_t* id;
  const std::string* locale;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_set_locale_result {
 public:

  User_set_locale_result(const User_set_locale_result&) noexcept;
  User_set_locale_result& operator=(const User_set_locale_result&) noexcept;
  User_set_locale_result() noexcept {
  }

  virtual ~User_set_locale_result() noexcept;

  bool operator == (const User_set_locale_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const User_set_locale_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_set_locale_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_set_locale_presult {
 public:


  virtual ~User_set_locale_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_set_timezone_args__isset {
  _User_set_timezone_args__isset() : id(false), timezone(false) {}
  bool id :1;
  bool timezone :1;
} _User_set_timezone_args__isset;

class User_set_timezone_args {
 public:

  User_set_timezone_args(const User_set_timezone_args&);
  User_set_timezone_args& operator=(const User_set_timezone_args&);
  User_set_timezone_args() noexcept
                         : id(0),
                           timezone() {
  }

  virtual ~User_set_timezone_args() noexcept;
  int64_t id;
  std::string timezone;

  _User_set_timezone_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_timezone(const std::string& val);

  bool operator == (const User_set_timezone_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(timezone == rhs.timezone))
      return false;
    return true;
  }
  bool operator != (const User_set_timezone_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_set_timezone_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_set_timezone_pargs {
 public:


  virtual ~User_set_timezone_pargs() noexcept;
  const int64_t* id;
  const std::string* timezone;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_set_timezone_result {
 public:

  User_set_timezone_result(const User_set_timezone_result&) noexcept;
  User_set_timezone_result& operator=(const User_set_timezone_result&) noexcept;
  User_set_timezone_result() noexcept {
  }

  virtual ~User_set_timezone_result() noexcept;

  bool operator == (const User_set_timezone_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const User_set_timezone_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_set_timezone_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_set_timezone_presult {
 public:


  virtual ~User_set_timezone_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_set_password_args__isset {
  _User_set_password_args__isset() : id(false), password(false) {}
  bool id :1;
  bool password :1;
} _User_set_password_args__isset;

class User_set_password_args {
 public:

  User_set_password_args(const User_set_password_args&);
  User_set_password_args& operator=(const User_set_password_args&);
  User_set_password_args() noexcept
                         : id(0),
                           password() {
  }

  virtual ~User_set_password_args() noexcept;
  int64_t id;
  std::string password;

  _User_set_password_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_password(const std::string& val);

  bool operator == (const User_set_password_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const User_set_password_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_set_password_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_set_password_pargs {
 public:


  virtual ~User_set_password_pargs() noexcept;
  const int64_t* id;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_set_password_result {
 public:

  User_set_password_result(const User_set_password_result&) noexcept;
  User_set_password_result& operator=(const User_set_password_result&) noexcept;
  User_set_password_result() noexcept {
  }

  virtual ~User_set_password_result() noexcept;

  bool operator == (const User_set_password_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const User_set_password_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_set_password_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_set_password_presult {
 public:


  virtual ~User_set_password_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_confirm_args__isset {
  _User_confirm_args__isset() : id(false) {}
  bool id :1;
} _User_confirm_args__isset;

class User_confirm_args {
 public:

  User_confirm_args(const User_confirm_args&) noexcept;
  User_confirm_args& operator=(const User_confirm_args&) noexcept;
  User_confirm_args() noexcept
                    : id(0) {
  }

  virtual ~User_confirm_args() noexcept;
  int64_t id;

  _User_confirm_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const User_confirm_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const User_confirm_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_confirm_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_confirm_pargs {
 public:


  virtual ~User_confirm_pargs() noexcept;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_confirm_result {
 public:

  User_confirm_result(const User_confirm_result&) noexcept;
  User_confirm_result& operator=(const User_confirm_result&) noexcept;
  User_confirm_result() noexcept {
  }

  virtual ~User_confirm_result() noexcept;

  bool operator == (const User_confirm_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const User_confirm_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_confirm_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_confirm_presult {
 public:


  virtual ~User_confirm_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_lock_args__isset {
  _User_lock_args__isset() : id(false) {}
  bool id :1;
} _User_lock_args__isset;

class User_lock_args {
 public:

  User_lock_args(const User_lock_args&) noexcept;
  User_lock_args& operator=(const User_lock_args&) noexcept;
  User_lock_args() noexcept
                 : id(0) {
  }

  virtual ~User_lock_args() noexcept;
  int64_t id;

  _User_lock_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const User_lock_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const User_lock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_lock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_lock_pargs {
 public:


  virtual ~User_lock_pargs() noexcept;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_lock_result {
 public:

  User_lock_result(const User_lock_result&) noexcept;
  User_lock_result& operator=(const User_lock_result&) noexcept;
  User_lock_result() noexcept {
  }

  virtual ~User_lock_result() noexcept;

  bool operator == (const User_lock_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const User_lock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_lock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_lock_presult {
 public:


  virtual ~User_lock_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_unlock_args__isset {
  _User_unlock_args__isset() : id(false) {}
  bool id :1;
} _User_unlock_args__isset;

class User_unlock_args {
 public:

  User_unlock_args(const User_unlock_args&) noexcept;
  User_unlock_args& operator=(const User_unlock_args&) noexcept;
  User_unlock_args() noexcept
                   : id(0) {
  }

  virtual ~User_unlock_args() noexcept;
  int64_t id;

  _User_unlock_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const User_unlock_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const User_unlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_unlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_unlock_pargs {
 public:


  virtual ~User_unlock_pargs() noexcept;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_unlock_result {
 public:

  User_unlock_result(const User_unlock_result&) noexcept;
  User_unlock_result& operator=(const User_unlock_result&) noexcept;
  User_unlock_result() noexcept {
  }

  virtual ~User_unlock_result() noexcept;

  bool operator == (const User_unlock_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const User_unlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_unlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_unlock_presult {
 public:


  virtual ~User_unlock_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_enable_args__isset {
  _User_enable_args__isset() : id(false) {}
  bool id :1;
} _User_enable_args__isset;

class User_enable_args {
 public:

  User_enable_args(const User_enable_args&) noexcept;
  User_enable_args& operator=(const User_enable_args&) noexcept;
  User_enable_args() noexcept
                   : id(0) {
  }

  virtual ~User_enable_args() noexcept;
  int64_t id;

  _User_enable_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const User_enable_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const User_enable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_enable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_enable_pargs {
 public:


  virtual ~User_enable_pargs() noexcept;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_enable_result {
 public:

  User_enable_result(const User_enable_result&) noexcept;
  User_enable_result& operator=(const User_enable_result&) noexcept;
  User_enable_result() noexcept {
  }

  virtual ~User_enable_result() noexcept;

  bool operator == (const User_enable_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const User_enable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_enable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_enable_presult {
 public:


  virtual ~User_enable_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_disable_args__isset {
  _User_disable_args__isset() : id(false) {}
  bool id :1;
} _User_disable_args__isset;

class User_disable_args {
 public:

  User_disable_args(const User_disable_args&) noexcept;
  User_disable_args& operator=(const User_disable_args&) noexcept;
  User_disable_args() noexcept
                    : id(0) {
  }

  virtual ~User_disable_args() noexcept;
  int64_t id;

  _User_disable_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const User_disable_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const User_disable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_disable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_disable_pargs {
 public:


  virtual ~User_disable_pargs() noexcept;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_disable_result {
 public:

  User_disable_result(const User_disable_result&) noexcept;
  User_disable_result& operator=(const User_disable_result&) noexcept;
  User_disable_result() noexcept {
  }

  virtual ~User_disable_result() noexcept;

  bool operator == (const User_disable_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const User_disable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_disable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_disable_presult {
 public:


  virtual ~User_disable_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class User_all_args {
 public:

  User_all_args(const User_all_args&) noexcept;
  User_all_args& operator=(const User_all_args&) noexcept;
  User_all_args() noexcept {
  }

  virtual ~User_all_args() noexcept;

  bool operator == (const User_all_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const User_all_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_all_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_all_pargs {
 public:


  virtual ~User_all_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_all_result__isset {
  _User_all_result__isset() : success(false) {}
  bool success :1;
} _User_all_result__isset;

class User_all_result {
 public:

  User_all_result(const User_all_result&);
  User_all_result& operator=(const User_all_result&);
  User_all_result() noexcept {
  }

  virtual ~User_all_result() noexcept;
  std::vector<UserInfo>  success;

  _User_all_result__isset __isset;

  void __set_success(const std::vector<UserInfo> & val);

  bool operator == (const User_all_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_all_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_all_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_all_presult__isset {
  _User_all_presult__isset() : success(false) {}
  bool success :1;
} _User_all_presult__isset;

class User_all_presult {
 public:


  virtual ~User_all_presult() noexcept;
  std::vector<UserInfo> * success;

  _User_all_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_by_nickname_args__isset {
  _User_by_nickname_args__isset() : nickname(false) {}
  bool nickname :1;
} _User_by_nickname_args__isset;

class User_by_nickname_args {
 public:

  User_by_nickname_args(const User_by_nickname_args&);
  User_by_nickname_args& operator=(const User_by_nickname_args&);
  User_by_nickname_args() noexcept
                        : nickname() {
  }

  virtual ~User_by_nickname_args() noexcept;
  std::string nickname;

  _User_by_nickname_args__isset __isset;

  void __set_nickname(const std::string& val);

  bool operator == (const User_by_nickname_args & rhs) const
  {
    if (!(nickname == rhs.nickname))
      return false;
    return true;
  }
  bool operator != (const User_by_nickname_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_by_nickname_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_by_nickname_pargs {
 public:


  virtual ~User_by_nickname_pargs() noexcept;
  const std::string* nickname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_by_nickname_result__isset {
  _User_by_nickname_result__isset() : success(false) {}
  bool success :1;
} _User_by_nickname_result__isset;

class User_by_nickname_result {
 public:

  User_by_nickname_result(const User_by_nickname_result&);
  User_by_nickname_result& operator=(const User_by_nickname_result&);
  User_by_nickname_result() noexcept {
  }

  virtual ~User_by_nickname_result() noexcept;
  UserInfo success;

  _User_by_nickname_result__isset __isset;

  void __set_success(const UserInfo& val);

  bool operator == (const User_by_nickname_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_by_nickname_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_by_nickname_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_by_nickname_presult__isset {
  _User_by_nickname_presult__isset() : success(false) {}
  bool success :1;
} _User_by_nickname_presult__isset;

class User_by_nickname_presult {
 public:


  virtual ~User_by_nickname_presult() noexcept;
  UserInfo* success;

  _User_by_nickname_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_by_email_args__isset {
  _User_by_email_args__isset() : email(false) {}
  bool email :1;
} _User_by_email_args__isset;

class User_by_email_args {
 public:

  User_by_email_args(const User_by_email_args&);
  User_by_email_args& operator=(const User_by_email_args&);
  User_by_email_args() noexcept
                     : email() {
  }

  virtual ~User_by_email_args() noexcept;
  std::string email;

  _User_by_email_args__isset __isset;

  void __set_email(const std::string& val);

  bool operator == (const User_by_email_args & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    return true;
  }
  bool operator != (const User_by_email_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_by_email_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_by_email_pargs {
 public:


  virtual ~User_by_email_pargs() noexcept;
  const std::string* email;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_by_email_result__isset {
  _User_by_email_result__isset() : success(false) {}
  bool success :1;
} _User_by_email_result__isset;

class User_by_email_result {
 public:

  User_by_email_result(const User_by_email_result&);
  User_by_email_result& operator=(const User_by_email_result&);
  User_by_email_result() noexcept {
  }

  virtual ~User_by_email_result() noexcept;
  UserInfo success;

  _User_by_email_result__isset __isset;

  void __set_success(const UserInfo& val);

  bool operator == (const User_by_email_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_by_email_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_by_email_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_by_email_presult__isset {
  _User_by_email_presult__isset() : success(false) {}
  bool success :1;
} _User_by_email_presult__isset;

class User_by_email_presult {
 public:


  virtual ~User_by_email_presult() noexcept;
  UserInfo* success;

  _User_by_email_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_by_id_args__isset {
  _User_by_id_args__isset() : id(false) {}
  bool id :1;
} _User_by_id_args__isset;

class User_by_id_args {
 public:

  User_by_id_args(const User_by_id_args&) noexcept;
  User_by_id_args& operator=(const User_by_id_args&) noexcept;
  User_by_id_args() noexcept
                  : id(0) {
  }

  virtual ~User_by_id_args() noexcept;
  int64_t id;

  _User_by_id_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const User_by_id_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const User_by_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_by_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_by_id_pargs {
 public:


  virtual ~User_by_id_pargs() noexcept;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_by_id_result__isset {
  _User_by_id_result__isset() : success(false) {}
  bool success :1;
} _User_by_id_result__isset;

class User_by_id_result {
 public:

  User_by_id_result(const User_by_id_result&);
  User_by_id_result& operator=(const User_by_id_result&);
  User_by_id_result() noexcept {
  }

  virtual ~User_by_id_result() noexcept;
  UserInfo success;

  _User_by_id_result__isset __isset;

  void __set_success(const UserInfo& val);

  bool operator == (const User_by_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_by_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_by_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_by_id_presult__isset {
  _User_by_id_presult__isset() : success(false) {}
  bool success :1;
} _User_by_id_presult__isset;

class User_by_id_presult {
 public:


  virtual ~User_by_id_presult() noexcept;
  UserInfo* success;

  _User_by_id_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_by_uid_args__isset {
  _User_by_uid_args__isset() : uid(false) {}
  bool uid :1;
} _User_by_uid_args__isset;

class User_by_uid_args {
 public:

  User_by_uid_args(const User_by_uid_args&);
  User_by_uid_args& operator=(const User_by_uid_args&);
  User_by_uid_args() noexcept
                   : uid() {
  }

  virtual ~User_by_uid_args() noexcept;
  std::string uid;

  _User_by_uid_args__isset __isset;

  void __set_uid(const std::string& val);

  bool operator == (const User_by_uid_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const User_by_uid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_by_uid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_by_uid_pargs {
 public:


  virtual ~User_by_uid_pargs() noexcept;
  const std::string* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_by_uid_result__isset {
  _User_by_uid_result__isset() : success(false) {}
  bool success :1;
} _User_by_uid_result__isset;

class User_by_uid_result {
 public:

  User_by_uid_result(const User_by_uid_result&);
  User_by_uid_result& operator=(const User_by_uid_result&);
  User_by_uid_result() noexcept {
  }

  virtual ~User_by_uid_result() noexcept;
  UserInfo success;

  _User_by_uid_result__isset __isset;

  void __set_success(const UserInfo& val);

  bool operator == (const User_by_uid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_by_uid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_by_uid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_by_uid_presult__isset {
  _User_by_uid_presult__isset() : success(false) {}
  bool success :1;
} _User_by_uid_presult__isset;

class User_by_uid_presult {
 public:


  virtual ~User_by_uid_presult() noexcept;
  UserInfo* success;

  _User_by_uid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UserClient : virtual public UserIf {
 public:
  UserClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sign_in(UserSignInResponse& _return, const UserSignInRequest& request) override;
  void send_sign_in(const UserSignInRequest& request);
  void recv_sign_in(UserSignInResponse& _return);
  void sign_up(const UserSignUpRequest& request) override;
  void send_sign_up(const UserSignUpRequest& request);
  void recv_sign_up();
  void confirm_by_email(const std::string& email) override;
  void send_confirm_by_email(const std::string& email);
  void recv_confirm_by_email();
  void configm_by_token(const std::string& token) override;
  void send_configm_by_token(const std::string& token);
  void recv_configm_by_token();
  void unlock_by_email(const std::string& email) override;
  void send_unlock_by_email(const std::string& email);
  void recv_unlock_by_email();
  void unlock_by_token(const std::string& token) override;
  void send_unlock_by_token(const std::string& token);
  void recv_unlock_by_token();
  void forgot_password(const std::string& email) override;
  void send_forgot_password(const std::string& email);
  void recv_forgot_password();
  void reset_password(const std::string& token, const std::string& password) override;
  void send_reset_password(const std::string& token, const std::string& password);
  void recv_reset_password();
  void set_real_name(const int64_t id, const std::string& real_name) override;
  void send_set_real_name(const int64_t id, const std::string& real_name);
  void recv_set_real_name();
  void set_avatar(const int64_t id, const std::string& avatar) override;
  void send_set_avatar(const int64_t id, const std::string& avatar);
  void recv_set_avatar();
  void set_locale(const int64_t id, const std::string& locale) override;
  void send_set_locale(const int64_t id, const std::string& locale);
  void recv_set_locale();
  void set_timezone(const int64_t id, const std::string& timezone) override;
  void send_set_timezone(const int64_t id, const std::string& timezone);
  void recv_set_timezone();
  void set_password(const int64_t id, const std::string& password) override;
  void send_set_password(const int64_t id, const std::string& password);
  void recv_set_password();
  void confirm(const int64_t id) override;
  void send_confirm(const int64_t id);
  void recv_confirm();
  void lock(const int64_t id) override;
  void send_lock(const int64_t id);
  void recv_lock();
  void unlock(const int64_t id) override;
  void send_unlock(const int64_t id);
  void recv_unlock();
  void enable(const int64_t id) override;
  void send_enable(const int64_t id);
  void recv_enable();
  void disable(const int64_t id) override;
  void send_disable(const int64_t id);
  void recv_disable();
  void all(std::vector<UserInfo> & _return) override;
  void send_all();
  void recv_all(std::vector<UserInfo> & _return);
  void by_nickname(UserInfo& _return, const std::string& nickname) override;
  void send_by_nickname(const std::string& nickname);
  void recv_by_nickname(UserInfo& _return);
  void by_email(UserInfo& _return, const std::string& email) override;
  void send_by_email(const std::string& email);
  void recv_by_email(UserInfo& _return);
  void by_id(UserInfo& _return, const int64_t id) override;
  void send_by_id(const int64_t id);
  void recv_by_id(UserInfo& _return);
  void by_uid(UserInfo& _return, const std::string& uid) override;
  void send_by_uid(const std::string& uid);
  void recv_by_uid(UserInfo& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<UserIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (UserProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sign_in(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sign_up(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_confirm_by_email(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_configm_by_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unlock_by_email(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unlock_by_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_forgot_password(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reset_password(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_real_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_avatar(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_locale(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_timezone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_password(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_confirm(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_lock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_enable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_all(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_by_nickname(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_by_email(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_by_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_by_uid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserProcessor(::std::shared_ptr<UserIf> iface) :
    iface_(iface) {
    processMap_["sign_in"] = &UserProcessor::process_sign_in;
    processMap_["sign_up"] = &UserProcessor::process_sign_up;
    processMap_["confirm_by_email"] = &UserProcessor::process_confirm_by_email;
    processMap_["configm_by_token"] = &UserProcessor::process_configm_by_token;
    processMap_["unlock_by_email"] = &UserProcessor::process_unlock_by_email;
    processMap_["unlock_by_token"] = &UserProcessor::process_unlock_by_token;
    processMap_["forgot_password"] = &UserProcessor::process_forgot_password;
    processMap_["reset_password"] = &UserProcessor::process_reset_password;
    processMap_["set_real_name"] = &UserProcessor::process_set_real_name;
    processMap_["set_avatar"] = &UserProcessor::process_set_avatar;
    processMap_["set_locale"] = &UserProcessor::process_set_locale;
    processMap_["set_timezone"] = &UserProcessor::process_set_timezone;
    processMap_["set_password"] = &UserProcessor::process_set_password;
    processMap_["confirm"] = &UserProcessor::process_confirm;
    processMap_["lock"] = &UserProcessor::process_lock;
    processMap_["unlock"] = &UserProcessor::process_unlock;
    processMap_["enable"] = &UserProcessor::process_enable;
    processMap_["disable"] = &UserProcessor::process_disable;
    processMap_["all"] = &UserProcessor::process_all;
    processMap_["by_nickname"] = &UserProcessor::process_by_nickname;
    processMap_["by_email"] = &UserProcessor::process_by_email;
    processMap_["by_id"] = &UserProcessor::process_by_id;
    processMap_["by_uid"] = &UserProcessor::process_by_uid;
  }

  virtual ~UserProcessor() {}
};

class UserProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UserProcessorFactory(const ::std::shared_ptr< UserIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< UserIfFactory > handlerFactory_;
};

class UserMultiface : virtual public UserIf {
 public:
  UserMultiface(std::vector<std::shared_ptr<UserIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserMultiface() {}
 protected:
  std::vector<std::shared_ptr<UserIf> > ifaces_;
  UserMultiface() {}
  void add(::std::shared_ptr<UserIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void sign_in(UserSignInResponse& _return, const UserSignInRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sign_in(_return, request);
    }
    ifaces_[i]->sign_in(_return, request);
    return;
  }

  void sign_up(const UserSignUpRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sign_up(request);
    }
    ifaces_[i]->sign_up(request);
  }

  void confirm_by_email(const std::string& email) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->confirm_by_email(email);
    }
    ifaces_[i]->confirm_by_email(email);
  }

  void configm_by_token(const std::string& token) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->configm_by_token(token);
    }
    ifaces_[i]->configm_by_token(token);
  }

  void unlock_by_email(const std::string& email) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unlock_by_email(email);
    }
    ifaces_[i]->unlock_by_email(email);
  }

  void unlock_by_token(const std::string& token) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unlock_by_token(token);
    }
    ifaces_[i]->unlock_by_token(token);
  }

  void forgot_password(const std::string& email) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->forgot_password(email);
    }
    ifaces_[i]->forgot_password(email);
  }

  void reset_password(const std::string& token, const std::string& password) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reset_password(token, password);
    }
    ifaces_[i]->reset_password(token, password);
  }

  void set_real_name(const int64_t id, const std::string& real_name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_real_name(id, real_name);
    }
    ifaces_[i]->set_real_name(id, real_name);
  }

  void set_avatar(const int64_t id, const std::string& avatar) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_avatar(id, avatar);
    }
    ifaces_[i]->set_avatar(id, avatar);
  }

  void set_locale(const int64_t id, const std::string& locale) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_locale(id, locale);
    }
    ifaces_[i]->set_locale(id, locale);
  }

  void set_timezone(const int64_t id, const std::string& timezone) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_timezone(id, timezone);
    }
    ifaces_[i]->set_timezone(id, timezone);
  }

  void set_password(const int64_t id, const std::string& password) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_password(id, password);
    }
    ifaces_[i]->set_password(id, password);
  }

  void confirm(const int64_t id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->confirm(id);
    }
    ifaces_[i]->confirm(id);
  }

  void lock(const int64_t id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lock(id);
    }
    ifaces_[i]->lock(id);
  }

  void unlock(const int64_t id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unlock(id);
    }
    ifaces_[i]->unlock(id);
  }

  void enable(const int64_t id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->enable(id);
    }
    ifaces_[i]->enable(id);
  }

  void disable(const int64_t id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disable(id);
    }
    ifaces_[i]->disable(id);
  }

  void all(std::vector<UserInfo> & _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->all(_return);
    }
    ifaces_[i]->all(_return);
    return;
  }

  void by_nickname(UserInfo& _return, const std::string& nickname) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->by_nickname(_return, nickname);
    }
    ifaces_[i]->by_nickname(_return, nickname);
    return;
  }

  void by_email(UserInfo& _return, const std::string& email) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->by_email(_return, email);
    }
    ifaces_[i]->by_email(_return, email);
    return;
  }

  void by_id(UserInfo& _return, const int64_t id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->by_id(_return, id);
    }
    ifaces_[i]->by_id(_return, id);
    return;
  }

  void by_uid(UserInfo& _return, const std::string& uid) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->by_uid(_return, uid);
    }
    ifaces_[i]->by_uid(_return, uid);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class UserConcurrentClient : virtual public UserIf {
 public:
  UserConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  UserConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sign_in(UserSignInResponse& _return, const UserSignInRequest& request) override;
  int32_t send_sign_in(const UserSignInRequest& request);
  void recv_sign_in(UserSignInResponse& _return, const int32_t seqid);
  void sign_up(const UserSignUpRequest& request) override;
  int32_t send_sign_up(const UserSignUpRequest& request);
  void recv_sign_up(const int32_t seqid);
  void confirm_by_email(const std::string& email) override;
  int32_t send_confirm_by_email(const std::string& email);
  void recv_confirm_by_email(const int32_t seqid);
  void configm_by_token(const std::string& token) override;
  int32_t send_configm_by_token(const std::string& token);
  void recv_configm_by_token(const int32_t seqid);
  void unlock_by_email(const std::string& email) override;
  int32_t send_unlock_by_email(const std::string& email);
  void recv_unlock_by_email(const int32_t seqid);
  void unlock_by_token(const std::string& token) override;
  int32_t send_unlock_by_token(const std::string& token);
  void recv_unlock_by_token(const int32_t seqid);
  void forgot_password(const std::string& email) override;
  int32_t send_forgot_password(const std::string& email);
  void recv_forgot_password(const int32_t seqid);
  void reset_password(const std::string& token, const std::string& password) override;
  int32_t send_reset_password(const std::string& token, const std::string& password);
  void recv_reset_password(const int32_t seqid);
  void set_real_name(const int64_t id, const std::string& real_name) override;
  int32_t send_set_real_name(const int64_t id, const std::string& real_name);
  void recv_set_real_name(const int32_t seqid);
  void set_avatar(const int64_t id, const std::string& avatar) override;
  int32_t send_set_avatar(const int64_t id, const std::string& avatar);
  void recv_set_avatar(const int32_t seqid);
  void set_locale(const int64_t id, const std::string& locale) override;
  int32_t send_set_locale(const int64_t id, const std::string& locale);
  void recv_set_locale(const int32_t seqid);
  void set_timezone(const int64_t id, const std::string& timezone) override;
  int32_t send_set_timezone(const int64_t id, const std::string& timezone);
  void recv_set_timezone(const int32_t seqid);
  void set_password(const int64_t id, const std::string& password) override;
  int32_t send_set_password(const int64_t id, const std::string& password);
  void recv_set_password(const int32_t seqid);
  void confirm(const int64_t id) override;
  int32_t send_confirm(const int64_t id);
  void recv_confirm(const int32_t seqid);
  void lock(const int64_t id) override;
  int32_t send_lock(const int64_t id);
  void recv_lock(const int32_t seqid);
  void unlock(const int64_t id) override;
  int32_t send_unlock(const int64_t id);
  void recv_unlock(const int32_t seqid);
  void enable(const int64_t id) override;
  int32_t send_enable(const int64_t id);
  void recv_enable(const int32_t seqid);
  void disable(const int64_t id) override;
  int32_t send_disable(const int64_t id);
  void recv_disable(const int32_t seqid);
  void all(std::vector<UserInfo> & _return) override;
  int32_t send_all();
  void recv_all(std::vector<UserInfo> & _return, const int32_t seqid);
  void by_nickname(UserInfo& _return, const std::string& nickname) override;
  int32_t send_by_nickname(const std::string& nickname);
  void recv_by_nickname(UserInfo& _return, const int32_t seqid);
  void by_email(UserInfo& _return, const std::string& email) override;
  int32_t send_by_email(const std::string& email);
  void recv_by_email(UserInfo& _return, const int32_t seqid);
  void by_id(UserInfo& _return, const int64_t id) override;
  int32_t send_by_id(const int64_t id);
  void recv_by_id(UserInfo& _return, const int32_t seqid);
  void by_uid(UserInfo& _return, const std::string& uid) override;
  int32_t send_by_uid(const std::string& uid);
  void recv_by_uid(UserInfo& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
