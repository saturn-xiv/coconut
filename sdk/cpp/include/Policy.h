/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Policy_H
#define Policy_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "auth_types.h"

namespace coconut { namespace v1 {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class PolicyIf {
 public:
  virtual ~PolicyIf() {}
  virtual void can(const int64_t user, const std::string& operation, const Resource& resource) = 0;
  virtual void has(const int64_t user, const std::string& role) = 0;
  virtual void add_roles_for_user(const int64_t user, const std::vector<std::string> & roles) = 0;
  virtual void remove_roles_for_user(const int64_t user, const std::vector<std::string> & roles) = 0;
  virtual void get_roles_for_user(std::vector<std::string> & _return, const int64_t user) = 0;
  virtual void get_users_for_role(std::vector<int64_t> & _return, const std::string& role) = 0;
  virtual void add_permissions_for_user(const int64_t user, const std::vector<Permission> & permissions) = 0;
  virtual void remove_permissions_for_user(const int64_t user, const std::vector<Permission> & permissions) = 0;
  virtual void add_permissions_for_role(const std::string& role, const std::vector<Permission> & permissions) = 0;
  virtual void remove_permissions_for_role(const std::string& role, const std::vector<Permission> & permissions) = 0;
  virtual void get_permissions_for_user(std::vector<Permission> & _return, const int64_t user) = 0;
  virtual void get_permissions_for_role(std::vector<Permission> & _return, const std::string& role) = 0;
};

class PolicyIfFactory {
 public:
  typedef PolicyIf Handler;

  virtual ~PolicyIfFactory() {}

  virtual PolicyIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PolicyIf* /* handler */) = 0;
  };

class PolicyIfSingletonFactory : virtual public PolicyIfFactory {
 public:
  PolicyIfSingletonFactory(const ::std::shared_ptr<PolicyIf>& iface) : iface_(iface) {}
  virtual ~PolicyIfSingletonFactory() {}

  virtual PolicyIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(PolicyIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<PolicyIf> iface_;
};

class PolicyNull : virtual public PolicyIf {
 public:
  virtual ~PolicyNull() {}
  void can(const int64_t /* user */, const std::string& /* operation */, const Resource& /* resource */) override {
    return;
  }
  void has(const int64_t /* user */, const std::string& /* role */) override {
    return;
  }
  void add_roles_for_user(const int64_t /* user */, const std::vector<std::string> & /* roles */) override {
    return;
  }
  void remove_roles_for_user(const int64_t /* user */, const std::vector<std::string> & /* roles */) override {
    return;
  }
  void get_roles_for_user(std::vector<std::string> & /* _return */, const int64_t /* user */) override {
    return;
  }
  void get_users_for_role(std::vector<int64_t> & /* _return */, const std::string& /* role */) override {
    return;
  }
  void add_permissions_for_user(const int64_t /* user */, const std::vector<Permission> & /* permissions */) override {
    return;
  }
  void remove_permissions_for_user(const int64_t /* user */, const std::vector<Permission> & /* permissions */) override {
    return;
  }
  void add_permissions_for_role(const std::string& /* role */, const std::vector<Permission> & /* permissions */) override {
    return;
  }
  void remove_permissions_for_role(const std::string& /* role */, const std::vector<Permission> & /* permissions */) override {
    return;
  }
  void get_permissions_for_user(std::vector<Permission> & /* _return */, const int64_t /* user */) override {
    return;
  }
  void get_permissions_for_role(std::vector<Permission> & /* _return */, const std::string& /* role */) override {
    return;
  }
};

typedef struct _Policy_can_args__isset {
  _Policy_can_args__isset() : user(false), operation(false), resource(false) {}
  bool user :1;
  bool operation :1;
  bool resource :1;
} _Policy_can_args__isset;

class Policy_can_args {
 public:

  Policy_can_args(const Policy_can_args&);
  Policy_can_args& operator=(const Policy_can_args&);
  Policy_can_args() noexcept
                  : user(0),
                    operation() {
  }

  virtual ~Policy_can_args() noexcept;
  int64_t user;
  std::string operation;
  Resource resource;

  _Policy_can_args__isset __isset;

  void __set_user(const int64_t val);

  void __set_operation(const std::string& val);

  void __set_resource(const Resource& val);

  bool operator == (const Policy_can_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(operation == rhs.operation))
      return false;
    if (!(resource == rhs.resource))
      return false;
    return true;
  }
  bool operator != (const Policy_can_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_can_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_can_pargs {
 public:


  virtual ~Policy_can_pargs() noexcept;
  const int64_t* user;
  const std::string* operation;
  const Resource* resource;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_can_result {
 public:

  Policy_can_result(const Policy_can_result&) noexcept;
  Policy_can_result& operator=(const Policy_can_result&) noexcept;
  Policy_can_result() noexcept {
  }

  virtual ~Policy_can_result() noexcept;

  bool operator == (const Policy_can_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Policy_can_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_can_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_can_presult {
 public:


  virtual ~Policy_can_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Policy_has_args__isset {
  _Policy_has_args__isset() : user(false), role(false) {}
  bool user :1;
  bool role :1;
} _Policy_has_args__isset;

class Policy_has_args {
 public:

  Policy_has_args(const Policy_has_args&);
  Policy_has_args& operator=(const Policy_has_args&);
  Policy_has_args() noexcept
                  : user(0),
                    role() {
  }

  virtual ~Policy_has_args() noexcept;
  int64_t user;
  std::string role;

  _Policy_has_args__isset __isset;

  void __set_user(const int64_t val);

  void __set_role(const std::string& val);

  bool operator == (const Policy_has_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(role == rhs.role))
      return false;
    return true;
  }
  bool operator != (const Policy_has_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_has_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_has_pargs {
 public:


  virtual ~Policy_has_pargs() noexcept;
  const int64_t* user;
  const std::string* role;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_has_result {
 public:

  Policy_has_result(const Policy_has_result&) noexcept;
  Policy_has_result& operator=(const Policy_has_result&) noexcept;
  Policy_has_result() noexcept {
  }

  virtual ~Policy_has_result() noexcept;

  bool operator == (const Policy_has_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Policy_has_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_has_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_has_presult {
 public:


  virtual ~Policy_has_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Policy_add_roles_for_user_args__isset {
  _Policy_add_roles_for_user_args__isset() : user(false), roles(false) {}
  bool user :1;
  bool roles :1;
} _Policy_add_roles_for_user_args__isset;

class Policy_add_roles_for_user_args {
 public:

  Policy_add_roles_for_user_args(const Policy_add_roles_for_user_args&);
  Policy_add_roles_for_user_args& operator=(const Policy_add_roles_for_user_args&);
  Policy_add_roles_for_user_args() noexcept
                                 : user(0) {
  }

  virtual ~Policy_add_roles_for_user_args() noexcept;
  int64_t user;
  std::vector<std::string>  roles;

  _Policy_add_roles_for_user_args__isset __isset;

  void __set_user(const int64_t val);

  void __set_roles(const std::vector<std::string> & val);

  bool operator == (const Policy_add_roles_for_user_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(roles == rhs.roles))
      return false;
    return true;
  }
  bool operator != (const Policy_add_roles_for_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_add_roles_for_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_add_roles_for_user_pargs {
 public:


  virtual ~Policy_add_roles_for_user_pargs() noexcept;
  const int64_t* user;
  const std::vector<std::string> * roles;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_add_roles_for_user_result {
 public:

  Policy_add_roles_for_user_result(const Policy_add_roles_for_user_result&) noexcept;
  Policy_add_roles_for_user_result& operator=(const Policy_add_roles_for_user_result&) noexcept;
  Policy_add_roles_for_user_result() noexcept {
  }

  virtual ~Policy_add_roles_for_user_result() noexcept;

  bool operator == (const Policy_add_roles_for_user_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Policy_add_roles_for_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_add_roles_for_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_add_roles_for_user_presult {
 public:


  virtual ~Policy_add_roles_for_user_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Policy_remove_roles_for_user_args__isset {
  _Policy_remove_roles_for_user_args__isset() : user(false), roles(false) {}
  bool user :1;
  bool roles :1;
} _Policy_remove_roles_for_user_args__isset;

class Policy_remove_roles_for_user_args {
 public:

  Policy_remove_roles_for_user_args(const Policy_remove_roles_for_user_args&);
  Policy_remove_roles_for_user_args& operator=(const Policy_remove_roles_for_user_args&);
  Policy_remove_roles_for_user_args() noexcept
                                    : user(0) {
  }

  virtual ~Policy_remove_roles_for_user_args() noexcept;
  int64_t user;
  std::vector<std::string>  roles;

  _Policy_remove_roles_for_user_args__isset __isset;

  void __set_user(const int64_t val);

  void __set_roles(const std::vector<std::string> & val);

  bool operator == (const Policy_remove_roles_for_user_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(roles == rhs.roles))
      return false;
    return true;
  }
  bool operator != (const Policy_remove_roles_for_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_remove_roles_for_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_remove_roles_for_user_pargs {
 public:


  virtual ~Policy_remove_roles_for_user_pargs() noexcept;
  const int64_t* user;
  const std::vector<std::string> * roles;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_remove_roles_for_user_result {
 public:

  Policy_remove_roles_for_user_result(const Policy_remove_roles_for_user_result&) noexcept;
  Policy_remove_roles_for_user_result& operator=(const Policy_remove_roles_for_user_result&) noexcept;
  Policy_remove_roles_for_user_result() noexcept {
  }

  virtual ~Policy_remove_roles_for_user_result() noexcept;

  bool operator == (const Policy_remove_roles_for_user_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Policy_remove_roles_for_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_remove_roles_for_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_remove_roles_for_user_presult {
 public:


  virtual ~Policy_remove_roles_for_user_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Policy_get_roles_for_user_args__isset {
  _Policy_get_roles_for_user_args__isset() : user(false) {}
  bool user :1;
} _Policy_get_roles_for_user_args__isset;

class Policy_get_roles_for_user_args {
 public:

  Policy_get_roles_for_user_args(const Policy_get_roles_for_user_args&) noexcept;
  Policy_get_roles_for_user_args& operator=(const Policy_get_roles_for_user_args&) noexcept;
  Policy_get_roles_for_user_args() noexcept
                                 : user(0) {
  }

  virtual ~Policy_get_roles_for_user_args() noexcept;
  int64_t user;

  _Policy_get_roles_for_user_args__isset __isset;

  void __set_user(const int64_t val);

  bool operator == (const Policy_get_roles_for_user_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const Policy_get_roles_for_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_get_roles_for_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_get_roles_for_user_pargs {
 public:


  virtual ~Policy_get_roles_for_user_pargs() noexcept;
  const int64_t* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Policy_get_roles_for_user_result__isset {
  _Policy_get_roles_for_user_result__isset() : success(false) {}
  bool success :1;
} _Policy_get_roles_for_user_result__isset;

class Policy_get_roles_for_user_result {
 public:

  Policy_get_roles_for_user_result(const Policy_get_roles_for_user_result&);
  Policy_get_roles_for_user_result& operator=(const Policy_get_roles_for_user_result&);
  Policy_get_roles_for_user_result() noexcept {
  }

  virtual ~Policy_get_roles_for_user_result() noexcept;
  std::vector<std::string>  success;

  _Policy_get_roles_for_user_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const Policy_get_roles_for_user_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Policy_get_roles_for_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_get_roles_for_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Policy_get_roles_for_user_presult__isset {
  _Policy_get_roles_for_user_presult__isset() : success(false) {}
  bool success :1;
} _Policy_get_roles_for_user_presult__isset;

class Policy_get_roles_for_user_presult {
 public:


  virtual ~Policy_get_roles_for_user_presult() noexcept;
  std::vector<std::string> * success;

  _Policy_get_roles_for_user_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Policy_get_users_for_role_args__isset {
  _Policy_get_users_for_role_args__isset() : role(false) {}
  bool role :1;
} _Policy_get_users_for_role_args__isset;

class Policy_get_users_for_role_args {
 public:

  Policy_get_users_for_role_args(const Policy_get_users_for_role_args&);
  Policy_get_users_for_role_args& operator=(const Policy_get_users_for_role_args&);
  Policy_get_users_for_role_args() noexcept
                                 : role() {
  }

  virtual ~Policy_get_users_for_role_args() noexcept;
  std::string role;

  _Policy_get_users_for_role_args__isset __isset;

  void __set_role(const std::string& val);

  bool operator == (const Policy_get_users_for_role_args & rhs) const
  {
    if (!(role == rhs.role))
      return false;
    return true;
  }
  bool operator != (const Policy_get_users_for_role_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_get_users_for_role_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_get_users_for_role_pargs {
 public:


  virtual ~Policy_get_users_for_role_pargs() noexcept;
  const std::string* role;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Policy_get_users_for_role_result__isset {
  _Policy_get_users_for_role_result__isset() : success(false) {}
  bool success :1;
} _Policy_get_users_for_role_result__isset;

class Policy_get_users_for_role_result {
 public:

  Policy_get_users_for_role_result(const Policy_get_users_for_role_result&);
  Policy_get_users_for_role_result& operator=(const Policy_get_users_for_role_result&);
  Policy_get_users_for_role_result() noexcept {
  }

  virtual ~Policy_get_users_for_role_result() noexcept;
  std::vector<int64_t>  success;

  _Policy_get_users_for_role_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const Policy_get_users_for_role_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Policy_get_users_for_role_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_get_users_for_role_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Policy_get_users_for_role_presult__isset {
  _Policy_get_users_for_role_presult__isset() : success(false) {}
  bool success :1;
} _Policy_get_users_for_role_presult__isset;

class Policy_get_users_for_role_presult {
 public:


  virtual ~Policy_get_users_for_role_presult() noexcept;
  std::vector<int64_t> * success;

  _Policy_get_users_for_role_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Policy_add_permissions_for_user_args__isset {
  _Policy_add_permissions_for_user_args__isset() : user(false), permissions(false) {}
  bool user :1;
  bool permissions :1;
} _Policy_add_permissions_for_user_args__isset;

class Policy_add_permissions_for_user_args {
 public:

  Policy_add_permissions_for_user_args(const Policy_add_permissions_for_user_args&);
  Policy_add_permissions_for_user_args& operator=(const Policy_add_permissions_for_user_args&);
  Policy_add_permissions_for_user_args() noexcept
                                       : user(0) {
  }

  virtual ~Policy_add_permissions_for_user_args() noexcept;
  int64_t user;
  std::vector<Permission>  permissions;

  _Policy_add_permissions_for_user_args__isset __isset;

  void __set_user(const int64_t val);

  void __set_permissions(const std::vector<Permission> & val);

  bool operator == (const Policy_add_permissions_for_user_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(permissions == rhs.permissions))
      return false;
    return true;
  }
  bool operator != (const Policy_add_permissions_for_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_add_permissions_for_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_add_permissions_for_user_pargs {
 public:


  virtual ~Policy_add_permissions_for_user_pargs() noexcept;
  const int64_t* user;
  const std::vector<Permission> * permissions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_add_permissions_for_user_result {
 public:

  Policy_add_permissions_for_user_result(const Policy_add_permissions_for_user_result&) noexcept;
  Policy_add_permissions_for_user_result& operator=(const Policy_add_permissions_for_user_result&) noexcept;
  Policy_add_permissions_for_user_result() noexcept {
  }

  virtual ~Policy_add_permissions_for_user_result() noexcept;

  bool operator == (const Policy_add_permissions_for_user_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Policy_add_permissions_for_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_add_permissions_for_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_add_permissions_for_user_presult {
 public:


  virtual ~Policy_add_permissions_for_user_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Policy_remove_permissions_for_user_args__isset {
  _Policy_remove_permissions_for_user_args__isset() : user(false), permissions(false) {}
  bool user :1;
  bool permissions :1;
} _Policy_remove_permissions_for_user_args__isset;

class Policy_remove_permissions_for_user_args {
 public:

  Policy_remove_permissions_for_user_args(const Policy_remove_permissions_for_user_args&);
  Policy_remove_permissions_for_user_args& operator=(const Policy_remove_permissions_for_user_args&);
  Policy_remove_permissions_for_user_args() noexcept
                                          : user(0) {
  }

  virtual ~Policy_remove_permissions_for_user_args() noexcept;
  int64_t user;
  std::vector<Permission>  permissions;

  _Policy_remove_permissions_for_user_args__isset __isset;

  void __set_user(const int64_t val);

  void __set_permissions(const std::vector<Permission> & val);

  bool operator == (const Policy_remove_permissions_for_user_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(permissions == rhs.permissions))
      return false;
    return true;
  }
  bool operator != (const Policy_remove_permissions_for_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_remove_permissions_for_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_remove_permissions_for_user_pargs {
 public:


  virtual ~Policy_remove_permissions_for_user_pargs() noexcept;
  const int64_t* user;
  const std::vector<Permission> * permissions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_remove_permissions_for_user_result {
 public:

  Policy_remove_permissions_for_user_result(const Policy_remove_permissions_for_user_result&) noexcept;
  Policy_remove_permissions_for_user_result& operator=(const Policy_remove_permissions_for_user_result&) noexcept;
  Policy_remove_permissions_for_user_result() noexcept {
  }

  virtual ~Policy_remove_permissions_for_user_result() noexcept;

  bool operator == (const Policy_remove_permissions_for_user_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Policy_remove_permissions_for_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_remove_permissions_for_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_remove_permissions_for_user_presult {
 public:


  virtual ~Policy_remove_permissions_for_user_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Policy_add_permissions_for_role_args__isset {
  _Policy_add_permissions_for_role_args__isset() : role(false), permissions(false) {}
  bool role :1;
  bool permissions :1;
} _Policy_add_permissions_for_role_args__isset;

class Policy_add_permissions_for_role_args {
 public:

  Policy_add_permissions_for_role_args(const Policy_add_permissions_for_role_args&);
  Policy_add_permissions_for_role_args& operator=(const Policy_add_permissions_for_role_args&);
  Policy_add_permissions_for_role_args() noexcept
                                       : role() {
  }

  virtual ~Policy_add_permissions_for_role_args() noexcept;
  std::string role;
  std::vector<Permission>  permissions;

  _Policy_add_permissions_for_role_args__isset __isset;

  void __set_role(const std::string& val);

  void __set_permissions(const std::vector<Permission> & val);

  bool operator == (const Policy_add_permissions_for_role_args & rhs) const
  {
    if (!(role == rhs.role))
      return false;
    if (!(permissions == rhs.permissions))
      return false;
    return true;
  }
  bool operator != (const Policy_add_permissions_for_role_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_add_permissions_for_role_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_add_permissions_for_role_pargs {
 public:


  virtual ~Policy_add_permissions_for_role_pargs() noexcept;
  const std::string* role;
  const std::vector<Permission> * permissions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_add_permissions_for_role_result {
 public:

  Policy_add_permissions_for_role_result(const Policy_add_permissions_for_role_result&) noexcept;
  Policy_add_permissions_for_role_result& operator=(const Policy_add_permissions_for_role_result&) noexcept;
  Policy_add_permissions_for_role_result() noexcept {
  }

  virtual ~Policy_add_permissions_for_role_result() noexcept;

  bool operator == (const Policy_add_permissions_for_role_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Policy_add_permissions_for_role_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_add_permissions_for_role_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_add_permissions_for_role_presult {
 public:


  virtual ~Policy_add_permissions_for_role_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Policy_remove_permissions_for_role_args__isset {
  _Policy_remove_permissions_for_role_args__isset() : role(false), permissions(false) {}
  bool role :1;
  bool permissions :1;
} _Policy_remove_permissions_for_role_args__isset;

class Policy_remove_permissions_for_role_args {
 public:

  Policy_remove_permissions_for_role_args(const Policy_remove_permissions_for_role_args&);
  Policy_remove_permissions_for_role_args& operator=(const Policy_remove_permissions_for_role_args&);
  Policy_remove_permissions_for_role_args() noexcept
                                          : role() {
  }

  virtual ~Policy_remove_permissions_for_role_args() noexcept;
  std::string role;
  std::vector<Permission>  permissions;

  _Policy_remove_permissions_for_role_args__isset __isset;

  void __set_role(const std::string& val);

  void __set_permissions(const std::vector<Permission> & val);

  bool operator == (const Policy_remove_permissions_for_role_args & rhs) const
  {
    if (!(role == rhs.role))
      return false;
    if (!(permissions == rhs.permissions))
      return false;
    return true;
  }
  bool operator != (const Policy_remove_permissions_for_role_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_remove_permissions_for_role_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_remove_permissions_for_role_pargs {
 public:


  virtual ~Policy_remove_permissions_for_role_pargs() noexcept;
  const std::string* role;
  const std::vector<Permission> * permissions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_remove_permissions_for_role_result {
 public:

  Policy_remove_permissions_for_role_result(const Policy_remove_permissions_for_role_result&) noexcept;
  Policy_remove_permissions_for_role_result& operator=(const Policy_remove_permissions_for_role_result&) noexcept;
  Policy_remove_permissions_for_role_result() noexcept {
  }

  virtual ~Policy_remove_permissions_for_role_result() noexcept;

  bool operator == (const Policy_remove_permissions_for_role_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Policy_remove_permissions_for_role_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_remove_permissions_for_role_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_remove_permissions_for_role_presult {
 public:


  virtual ~Policy_remove_permissions_for_role_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Policy_get_permissions_for_user_args__isset {
  _Policy_get_permissions_for_user_args__isset() : user(false) {}
  bool user :1;
} _Policy_get_permissions_for_user_args__isset;

class Policy_get_permissions_for_user_args {
 public:

  Policy_get_permissions_for_user_args(const Policy_get_permissions_for_user_args&) noexcept;
  Policy_get_permissions_for_user_args& operator=(const Policy_get_permissions_for_user_args&) noexcept;
  Policy_get_permissions_for_user_args() noexcept
                                       : user(0) {
  }

  virtual ~Policy_get_permissions_for_user_args() noexcept;
  int64_t user;

  _Policy_get_permissions_for_user_args__isset __isset;

  void __set_user(const int64_t val);

  bool operator == (const Policy_get_permissions_for_user_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const Policy_get_permissions_for_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_get_permissions_for_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_get_permissions_for_user_pargs {
 public:


  virtual ~Policy_get_permissions_for_user_pargs() noexcept;
  const int64_t* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Policy_get_permissions_for_user_result__isset {
  _Policy_get_permissions_for_user_result__isset() : success(false) {}
  bool success :1;
} _Policy_get_permissions_for_user_result__isset;

class Policy_get_permissions_for_user_result {
 public:

  Policy_get_permissions_for_user_result(const Policy_get_permissions_for_user_result&);
  Policy_get_permissions_for_user_result& operator=(const Policy_get_permissions_for_user_result&);
  Policy_get_permissions_for_user_result() noexcept {
  }

  virtual ~Policy_get_permissions_for_user_result() noexcept;
  std::vector<Permission>  success;

  _Policy_get_permissions_for_user_result__isset __isset;

  void __set_success(const std::vector<Permission> & val);

  bool operator == (const Policy_get_permissions_for_user_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Policy_get_permissions_for_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_get_permissions_for_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Policy_get_permissions_for_user_presult__isset {
  _Policy_get_permissions_for_user_presult__isset() : success(false) {}
  bool success :1;
} _Policy_get_permissions_for_user_presult__isset;

class Policy_get_permissions_for_user_presult {
 public:


  virtual ~Policy_get_permissions_for_user_presult() noexcept;
  std::vector<Permission> * success;

  _Policy_get_permissions_for_user_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Policy_get_permissions_for_role_args__isset {
  _Policy_get_permissions_for_role_args__isset() : role(false) {}
  bool role :1;
} _Policy_get_permissions_for_role_args__isset;

class Policy_get_permissions_for_role_args {
 public:

  Policy_get_permissions_for_role_args(const Policy_get_permissions_for_role_args&);
  Policy_get_permissions_for_role_args& operator=(const Policy_get_permissions_for_role_args&);
  Policy_get_permissions_for_role_args() noexcept
                                       : role() {
  }

  virtual ~Policy_get_permissions_for_role_args() noexcept;
  std::string role;

  _Policy_get_permissions_for_role_args__isset __isset;

  void __set_role(const std::string& val);

  bool operator == (const Policy_get_permissions_for_role_args & rhs) const
  {
    if (!(role == rhs.role))
      return false;
    return true;
  }
  bool operator != (const Policy_get_permissions_for_role_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_get_permissions_for_role_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Policy_get_permissions_for_role_pargs {
 public:


  virtual ~Policy_get_permissions_for_role_pargs() noexcept;
  const std::string* role;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Policy_get_permissions_for_role_result__isset {
  _Policy_get_permissions_for_role_result__isset() : success(false) {}
  bool success :1;
} _Policy_get_permissions_for_role_result__isset;

class Policy_get_permissions_for_role_result {
 public:

  Policy_get_permissions_for_role_result(const Policy_get_permissions_for_role_result&);
  Policy_get_permissions_for_role_result& operator=(const Policy_get_permissions_for_role_result&);
  Policy_get_permissions_for_role_result() noexcept {
  }

  virtual ~Policy_get_permissions_for_role_result() noexcept;
  std::vector<Permission>  success;

  _Policy_get_permissions_for_role_result__isset __isset;

  void __set_success(const std::vector<Permission> & val);

  bool operator == (const Policy_get_permissions_for_role_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Policy_get_permissions_for_role_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Policy_get_permissions_for_role_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Policy_get_permissions_for_role_presult__isset {
  _Policy_get_permissions_for_role_presult__isset() : success(false) {}
  bool success :1;
} _Policy_get_permissions_for_role_presult__isset;

class Policy_get_permissions_for_role_presult {
 public:


  virtual ~Policy_get_permissions_for_role_presult() noexcept;
  std::vector<Permission> * success;

  _Policy_get_permissions_for_role_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PolicyClient : virtual public PolicyIf {
 public:
  PolicyClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PolicyClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void can(const int64_t user, const std::string& operation, const Resource& resource) override;
  void send_can(const int64_t user, const std::string& operation, const Resource& resource);
  void recv_can();
  void has(const int64_t user, const std::string& role) override;
  void send_has(const int64_t user, const std::string& role);
  void recv_has();
  void add_roles_for_user(const int64_t user, const std::vector<std::string> & roles) override;
  void send_add_roles_for_user(const int64_t user, const std::vector<std::string> & roles);
  void recv_add_roles_for_user();
  void remove_roles_for_user(const int64_t user, const std::vector<std::string> & roles) override;
  void send_remove_roles_for_user(const int64_t user, const std::vector<std::string> & roles);
  void recv_remove_roles_for_user();
  void get_roles_for_user(std::vector<std::string> & _return, const int64_t user) override;
  void send_get_roles_for_user(const int64_t user);
  void recv_get_roles_for_user(std::vector<std::string> & _return);
  void get_users_for_role(std::vector<int64_t> & _return, const std::string& role) override;
  void send_get_users_for_role(const std::string& role);
  void recv_get_users_for_role(std::vector<int64_t> & _return);
  void add_permissions_for_user(const int64_t user, const std::vector<Permission> & permissions) override;
  void send_add_permissions_for_user(const int64_t user, const std::vector<Permission> & permissions);
  void recv_add_permissions_for_user();
  void remove_permissions_for_user(const int64_t user, const std::vector<Permission> & permissions) override;
  void send_remove_permissions_for_user(const int64_t user, const std::vector<Permission> & permissions);
  void recv_remove_permissions_for_user();
  void add_permissions_for_role(const std::string& role, const std::vector<Permission> & permissions) override;
  void send_add_permissions_for_role(const std::string& role, const std::vector<Permission> & permissions);
  void recv_add_permissions_for_role();
  void remove_permissions_for_role(const std::string& role, const std::vector<Permission> & permissions) override;
  void send_remove_permissions_for_role(const std::string& role, const std::vector<Permission> & permissions);
  void recv_remove_permissions_for_role();
  void get_permissions_for_user(std::vector<Permission> & _return, const int64_t user) override;
  void send_get_permissions_for_user(const int64_t user);
  void recv_get_permissions_for_user(std::vector<Permission> & _return);
  void get_permissions_for_role(std::vector<Permission> & _return, const std::string& role) override;
  void send_get_permissions_for_role(const std::string& role);
  void recv_get_permissions_for_role(std::vector<Permission> & _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PolicyProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<PolicyIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (PolicyProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_can(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_has(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_roles_for_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_roles_for_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_roles_for_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_users_for_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_permissions_for_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_permissions_for_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_permissions_for_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_permissions_for_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_permissions_for_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_permissions_for_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PolicyProcessor(::std::shared_ptr<PolicyIf> iface) :
    iface_(iface) {
    processMap_["can"] = &PolicyProcessor::process_can;
    processMap_["has"] = &PolicyProcessor::process_has;
    processMap_["add_roles_for_user"] = &PolicyProcessor::process_add_roles_for_user;
    processMap_["remove_roles_for_user"] = &PolicyProcessor::process_remove_roles_for_user;
    processMap_["get_roles_for_user"] = &PolicyProcessor::process_get_roles_for_user;
    processMap_["get_users_for_role"] = &PolicyProcessor::process_get_users_for_role;
    processMap_["add_permissions_for_user"] = &PolicyProcessor::process_add_permissions_for_user;
    processMap_["remove_permissions_for_user"] = &PolicyProcessor::process_remove_permissions_for_user;
    processMap_["add_permissions_for_role"] = &PolicyProcessor::process_add_permissions_for_role;
    processMap_["remove_permissions_for_role"] = &PolicyProcessor::process_remove_permissions_for_role;
    processMap_["get_permissions_for_user"] = &PolicyProcessor::process_get_permissions_for_user;
    processMap_["get_permissions_for_role"] = &PolicyProcessor::process_get_permissions_for_role;
  }

  virtual ~PolicyProcessor() {}
};

class PolicyProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PolicyProcessorFactory(const ::std::shared_ptr< PolicyIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< PolicyIfFactory > handlerFactory_;
};

class PolicyMultiface : virtual public PolicyIf {
 public:
  PolicyMultiface(std::vector<std::shared_ptr<PolicyIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PolicyMultiface() {}
 protected:
  std::vector<std::shared_ptr<PolicyIf> > ifaces_;
  PolicyMultiface() {}
  void add(::std::shared_ptr<PolicyIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void can(const int64_t user, const std::string& operation, const Resource& resource) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->can(user, operation, resource);
    }
    ifaces_[i]->can(user, operation, resource);
  }

  void has(const int64_t user, const std::string& role) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->has(user, role);
    }
    ifaces_[i]->has(user, role);
  }

  void add_roles_for_user(const int64_t user, const std::vector<std::string> & roles) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_roles_for_user(user, roles);
    }
    ifaces_[i]->add_roles_for_user(user, roles);
  }

  void remove_roles_for_user(const int64_t user, const std::vector<std::string> & roles) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_roles_for_user(user, roles);
    }
    ifaces_[i]->remove_roles_for_user(user, roles);
  }

  void get_roles_for_user(std::vector<std::string> & _return, const int64_t user) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_roles_for_user(_return, user);
    }
    ifaces_[i]->get_roles_for_user(_return, user);
    return;
  }

  void get_users_for_role(std::vector<int64_t> & _return, const std::string& role) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_users_for_role(_return, role);
    }
    ifaces_[i]->get_users_for_role(_return, role);
    return;
  }

  void add_permissions_for_user(const int64_t user, const std::vector<Permission> & permissions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_permissions_for_user(user, permissions);
    }
    ifaces_[i]->add_permissions_for_user(user, permissions);
  }

  void remove_permissions_for_user(const int64_t user, const std::vector<Permission> & permissions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_permissions_for_user(user, permissions);
    }
    ifaces_[i]->remove_permissions_for_user(user, permissions);
  }

  void add_permissions_for_role(const std::string& role, const std::vector<Permission> & permissions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_permissions_for_role(role, permissions);
    }
    ifaces_[i]->add_permissions_for_role(role, permissions);
  }

  void remove_permissions_for_role(const std::string& role, const std::vector<Permission> & permissions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_permissions_for_role(role, permissions);
    }
    ifaces_[i]->remove_permissions_for_role(role, permissions);
  }

  void get_permissions_for_user(std::vector<Permission> & _return, const int64_t user) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_permissions_for_user(_return, user);
    }
    ifaces_[i]->get_permissions_for_user(_return, user);
    return;
  }

  void get_permissions_for_role(std::vector<Permission> & _return, const std::string& role) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_permissions_for_role(_return, role);
    }
    ifaces_[i]->get_permissions_for_role(_return, role);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class PolicyConcurrentClient : virtual public PolicyIf {
 public:
  PolicyConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  PolicyConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void can(const int64_t user, const std::string& operation, const Resource& resource) override;
  int32_t send_can(const int64_t user, const std::string& operation, const Resource& resource);
  void recv_can(const int32_t seqid);
  void has(const int64_t user, const std::string& role) override;
  int32_t send_has(const int64_t user, const std::string& role);
  void recv_has(const int32_t seqid);
  void add_roles_for_user(const int64_t user, const std::vector<std::string> & roles) override;
  int32_t send_add_roles_for_user(const int64_t user, const std::vector<std::string> & roles);
  void recv_add_roles_for_user(const int32_t seqid);
  void remove_roles_for_user(const int64_t user, const std::vector<std::string> & roles) override;
  int32_t send_remove_roles_for_user(const int64_t user, const std::vector<std::string> & roles);
  void recv_remove_roles_for_user(const int32_t seqid);
  void get_roles_for_user(std::vector<std::string> & _return, const int64_t user) override;
  int32_t send_get_roles_for_user(const int64_t user);
  void recv_get_roles_for_user(std::vector<std::string> & _return, const int32_t seqid);
  void get_users_for_role(std::vector<int64_t> & _return, const std::string& role) override;
  int32_t send_get_users_for_role(const std::string& role);
  void recv_get_users_for_role(std::vector<int64_t> & _return, const int32_t seqid);
  void add_permissions_for_user(const int64_t user, const std::vector<Permission> & permissions) override;
  int32_t send_add_permissions_for_user(const int64_t user, const std::vector<Permission> & permissions);
  void recv_add_permissions_for_user(const int32_t seqid);
  void remove_permissions_for_user(const int64_t user, const std::vector<Permission> & permissions) override;
  int32_t send_remove_permissions_for_user(const int64_t user, const std::vector<Permission> & permissions);
  void recv_remove_permissions_for_user(const int32_t seqid);
  void add_permissions_for_role(const std::string& role, const std::vector<Permission> & permissions) override;
  int32_t send_add_permissions_for_role(const std::string& role, const std::vector<Permission> & permissions);
  void recv_add_permissions_for_role(const int32_t seqid);
  void remove_permissions_for_role(const std::string& role, const std::vector<Permission> & permissions) override;
  int32_t send_remove_permissions_for_role(const std::string& role, const std::vector<Permission> & permissions);
  void recv_remove_permissions_for_role(const int32_t seqid);
  void get_permissions_for_user(std::vector<Permission> & _return, const int64_t user) override;
  int32_t send_get_permissions_for_user(const int64_t user);
  void recv_get_permissions_for_user(std::vector<Permission> & _return, const int32_t seqid);
  void get_permissions_for_role(std::vector<Permission> & _return, const std::string& role) override;
  int32_t send_get_permissions_for_role(const std::string& role);
  void recv_get_permissions_for_role(std::vector<Permission> & _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
