/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Log_H
#define Log_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "auth_types.h"

namespace coconut { namespace v1 {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class LogIf {
 public:
  virtual ~LogIf() {}
  virtual void by_user(std::vector<LogItem> & _return, const int64_t user) = 0;
  virtual void by_year_and_month(std::vector<LogItem> & _return, const int16_t year, const int8_t month) = 0;
};

class LogIfFactory {
 public:
  typedef LogIf Handler;

  virtual ~LogIfFactory() {}

  virtual LogIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(LogIf* /* handler */) = 0;
  };

class LogIfSingletonFactory : virtual public LogIfFactory {
 public:
  LogIfSingletonFactory(const ::std::shared_ptr<LogIf>& iface) : iface_(iface) {}
  virtual ~LogIfSingletonFactory() {}

  virtual LogIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(LogIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<LogIf> iface_;
};

class LogNull : virtual public LogIf {
 public:
  virtual ~LogNull() {}
  void by_user(std::vector<LogItem> & /* _return */, const int64_t /* user */) override {
    return;
  }
  void by_year_and_month(std::vector<LogItem> & /* _return */, const int16_t /* year */, const int8_t /* month */) override {
    return;
  }
};

typedef struct _Log_by_user_args__isset {
  _Log_by_user_args__isset() : user(false) {}
  bool user :1;
} _Log_by_user_args__isset;

class Log_by_user_args {
 public:

  Log_by_user_args(const Log_by_user_args&) noexcept;
  Log_by_user_args& operator=(const Log_by_user_args&) noexcept;
  Log_by_user_args() noexcept
                   : user(0) {
  }

  virtual ~Log_by_user_args() noexcept;
  int64_t user;

  _Log_by_user_args__isset __isset;

  void __set_user(const int64_t val);

  bool operator == (const Log_by_user_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const Log_by_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Log_by_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Log_by_user_pargs {
 public:


  virtual ~Log_by_user_pargs() noexcept;
  const int64_t* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Log_by_user_result__isset {
  _Log_by_user_result__isset() : success(false) {}
  bool success :1;
} _Log_by_user_result__isset;

class Log_by_user_result {
 public:

  Log_by_user_result(const Log_by_user_result&);
  Log_by_user_result& operator=(const Log_by_user_result&);
  Log_by_user_result() noexcept {
  }

  virtual ~Log_by_user_result() noexcept;
  std::vector<LogItem>  success;

  _Log_by_user_result__isset __isset;

  void __set_success(const std::vector<LogItem> & val);

  bool operator == (const Log_by_user_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Log_by_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Log_by_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Log_by_user_presult__isset {
  _Log_by_user_presult__isset() : success(false) {}
  bool success :1;
} _Log_by_user_presult__isset;

class Log_by_user_presult {
 public:


  virtual ~Log_by_user_presult() noexcept;
  std::vector<LogItem> * success;

  _Log_by_user_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Log_by_year_and_month_args__isset {
  _Log_by_year_and_month_args__isset() : year(false), month(false) {}
  bool year :1;
  bool month :1;
} _Log_by_year_and_month_args__isset;

class Log_by_year_and_month_args {
 public:

  Log_by_year_and_month_args(const Log_by_year_and_month_args&) noexcept;
  Log_by_year_and_month_args& operator=(const Log_by_year_and_month_args&) noexcept;
  Log_by_year_and_month_args() noexcept
                             : year(0),
                               month(0) {
  }

  virtual ~Log_by_year_and_month_args() noexcept;
  int16_t year;
  int8_t month;

  _Log_by_year_and_month_args__isset __isset;

  void __set_year(const int16_t val);

  void __set_month(const int8_t val);

  bool operator == (const Log_by_year_and_month_args & rhs) const
  {
    if (!(year == rhs.year))
      return false;
    if (!(month == rhs.month))
      return false;
    return true;
  }
  bool operator != (const Log_by_year_and_month_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Log_by_year_and_month_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Log_by_year_and_month_pargs {
 public:


  virtual ~Log_by_year_and_month_pargs() noexcept;
  const int16_t* year;
  const int8_t* month;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Log_by_year_and_month_result__isset {
  _Log_by_year_and_month_result__isset() : success(false) {}
  bool success :1;
} _Log_by_year_and_month_result__isset;

class Log_by_year_and_month_result {
 public:

  Log_by_year_and_month_result(const Log_by_year_and_month_result&);
  Log_by_year_and_month_result& operator=(const Log_by_year_and_month_result&);
  Log_by_year_and_month_result() noexcept {
  }

  virtual ~Log_by_year_and_month_result() noexcept;
  std::vector<LogItem>  success;

  _Log_by_year_and_month_result__isset __isset;

  void __set_success(const std::vector<LogItem> & val);

  bool operator == (const Log_by_year_and_month_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Log_by_year_and_month_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Log_by_year_and_month_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Log_by_year_and_month_presult__isset {
  _Log_by_year_and_month_presult__isset() : success(false) {}
  bool success :1;
} _Log_by_year_and_month_presult__isset;

class Log_by_year_and_month_presult {
 public:


  virtual ~Log_by_year_and_month_presult() noexcept;
  std::vector<LogItem> * success;

  _Log_by_year_and_month_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class LogClient : virtual public LogIf {
 public:
  LogClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LogClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void by_user(std::vector<LogItem> & _return, const int64_t user) override;
  void send_by_user(const int64_t user);
  void recv_by_user(std::vector<LogItem> & _return);
  void by_year_and_month(std::vector<LogItem> & _return, const int16_t year, const int8_t month) override;
  void send_by_year_and_month(const int16_t year, const int8_t month);
  void recv_by_year_and_month(std::vector<LogItem> & _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LogProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<LogIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (LogProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_by_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_by_year_and_month(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LogProcessor(::std::shared_ptr<LogIf> iface) :
    iface_(iface) {
    processMap_["by_user"] = &LogProcessor::process_by_user;
    processMap_["by_year_and_month"] = &LogProcessor::process_by_year_and_month;
  }

  virtual ~LogProcessor() {}
};

class LogProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  LogProcessorFactory(const ::std::shared_ptr< LogIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< LogIfFactory > handlerFactory_;
};

class LogMultiface : virtual public LogIf {
 public:
  LogMultiface(std::vector<std::shared_ptr<LogIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LogMultiface() {}
 protected:
  std::vector<std::shared_ptr<LogIf> > ifaces_;
  LogMultiface() {}
  void add(::std::shared_ptr<LogIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void by_user(std::vector<LogItem> & _return, const int64_t user) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->by_user(_return, user);
    }
    ifaces_[i]->by_user(_return, user);
    return;
  }

  void by_year_and_month(std::vector<LogItem> & _return, const int16_t year, const int8_t month) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->by_year_and_month(_return, year, month);
    }
    ifaces_[i]->by_year_and_month(_return, year, month);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class LogConcurrentClient : virtual public LogIf {
 public:
  LogConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  LogConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void by_user(std::vector<LogItem> & _return, const int64_t user) override;
  int32_t send_by_user(const int64_t user);
  void recv_by_user(std::vector<LogItem> & _return, const int32_t seqid);
  void by_year_and_month(std::vector<LogItem> & _return, const int16_t year, const int8_t month) override;
  int32_t send_by_year_and_month(const int16_t year, const int8_t month);
  void recv_by_year_and_month(std::vector<LogItem> & _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
