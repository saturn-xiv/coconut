/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef WechatMiniProgram_H
#define WechatMiniProgram_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "wechat_mini_program_types.h"

namespace coconut { namespace v1 {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class WechatMiniProgramIf {
 public:
  virtual ~WechatMiniProgramIf() {}
};

class WechatMiniProgramIfFactory {
 public:
  typedef WechatMiniProgramIf Handler;

  virtual ~WechatMiniProgramIfFactory() {}

  virtual WechatMiniProgramIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(WechatMiniProgramIf* /* handler */) = 0;
  };

class WechatMiniProgramIfSingletonFactory : virtual public WechatMiniProgramIfFactory {
 public:
  WechatMiniProgramIfSingletonFactory(const ::std::shared_ptr<WechatMiniProgramIf>& iface) : iface_(iface) {}
  virtual ~WechatMiniProgramIfSingletonFactory() {}

  virtual WechatMiniProgramIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(WechatMiniProgramIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<WechatMiniProgramIf> iface_;
};

class WechatMiniProgramNull : virtual public WechatMiniProgramIf {
 public:
  virtual ~WechatMiniProgramNull() {}
};

class WechatMiniProgramClient : virtual public WechatMiniProgramIf {
 public:
  WechatMiniProgramClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  WechatMiniProgramClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class WechatMiniProgramProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<WechatMiniProgramIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (WechatMiniProgramProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
 public:
  WechatMiniProgramProcessor(::std::shared_ptr<WechatMiniProgramIf> iface) :
    iface_(iface) {
  }

  virtual ~WechatMiniProgramProcessor() {}
};

class WechatMiniProgramProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  WechatMiniProgramProcessorFactory(const ::std::shared_ptr< WechatMiniProgramIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< WechatMiniProgramIfFactory > handlerFactory_;
};

class WechatMiniProgramMultiface : virtual public WechatMiniProgramIf {
 public:
  WechatMiniProgramMultiface(std::vector<std::shared_ptr<WechatMiniProgramIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~WechatMiniProgramMultiface() {}
 protected:
  std::vector<std::shared_ptr<WechatMiniProgramIf> > ifaces_;
  WechatMiniProgramMultiface() {}
  void add(::std::shared_ptr<WechatMiniProgramIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class WechatMiniProgramConcurrentClient : virtual public WechatMiniProgramIf {
 public:
  WechatMiniProgramConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  WechatMiniProgramConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
